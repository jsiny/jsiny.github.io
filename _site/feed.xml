<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en_US"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en_US" /><updated>2020-06-21T16:28:00+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Juliette Sinibardy</title><subtitle>Pending Programmer&lt;br&gt; ███░░░░░░░ 30%</subtitle><author><name>Juliette Sinibardy</name></author><entry><title type="html">My First Weeks as a Software Engineer</title><link href="http://localhost:4000/first-weeks-software-engineer" rel="alternate" type="text/html" title="My First Weeks as a Software Engineer" /><published>2020-06-20T18:28:00+02:00</published><updated>2020-06-21T18:28:00+02:00</updated><id>http://localhost:4000/becoming-software-engineer</id><content type="html" xml:base="http://localhost:4000/first-weeks-software-engineer">&lt;p&gt;After a year of solitary learning, I’ve finally started my first software engineering job. I’m 
excited, exhausted and extremely grateful for the path that led me here.&lt;/p&gt;

&lt;p&gt;I loved to read career switching stories so I thought I’d give a shot at writing my own.&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#job-searching&quot; id=&quot;markdown-toc-job-searching&quot;&gt;Job searching&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#interviews&quot; id=&quot;markdown-toc-interviews&quot;&gt;Interviews&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#my-company-and-position&quot; id=&quot;markdown-toc-my-company-and-position&quot;&gt;My company and position&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bridging-the-gap-between-studying-and-working&quot; id=&quot;markdown-toc-bridging-the-gap-between-studying-and-working&quot;&gt;Bridging the gap between studying and working&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#useful-resources&quot; id=&quot;markdown-toc-useful-resources&quot;&gt;Useful resources&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#final-notes&quot; id=&quot;markdown-toc-final-notes&quot;&gt;Final Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;For those who don’t know me, I’m a 26 years old woman living with my partner and my cats in Paris, 
France. I studied Economics and previously worked in a successful startup, where I ended up 
becoming general manager - until I decided to quit and become a software engineer. That was 
last August.&lt;/p&gt;

&lt;p&gt;Since May 2019, I had joined an online school dedicated to mastery based learning - Launch School,
where I started my programming journey. It took me until the end of 2019 to finish the back-end 
portion of the course, and I still haven’t finished the front-end portion (oopsie).&lt;/p&gt;

&lt;p&gt;I found a job in March 2020 (more on that later) but only started at the beginning of June, because
I had planned on going to Southern Africa in May 2020 - but covid happened and my safari 
became hundreds of hours playing Animal Crossing. Close enough.&lt;/p&gt;

&lt;h2 id=&quot;job-searching&quot;&gt;Job searching&lt;/h2&gt;

&lt;p&gt;Not gonna lie - I got extremely lucky on that part. I’m not sure how much of my job searching 
experience here is applicable to other situations, but here we go.&lt;/p&gt;

&lt;p&gt;I had registered on specialised platforms where software engineers describe their skills and 
job / salary expectations, and are later contacted by companies interested in their profile. 
Most French engineers use &lt;a href=&quot;https://www.talent.io/en/&quot;&gt;talent.io&lt;/a&gt; or 
&lt;a href=&quot;https://www.hiresweet.com/&quot;&gt;hiresweet&lt;/a&gt; for that purpose.&lt;/p&gt;

&lt;p&gt;I set up my profile without much expectations - given that I was a half-baked engineer - and 
thought I’d go back and improve it later (spoiler: I never did).&lt;/p&gt;

&lt;p&gt;A couple of weeks later, I was contacted by a recruiter from a company. I had 
already received my fair share of annoying Linkedin recruiters telling me I was perfect for some
position that clearly proved they hadn’t read a thing of my resume - but this offer stood out.
We got in touch, and as I moved along the interview process, it became clear that I could
&lt;em&gt;actually&lt;/em&gt; receive an offer from the company.&lt;/p&gt;

&lt;p&gt;So I did the only rational thing possible: I dropped everything and job searched like a maniac.
I didn’t want to receive an offer and not be able to actually know whether I liked this company
more than others, or if the salary offer was any good. I had grown accustomed to hearing the 
insane salaries that the &lt;a href=&quot;https://launchschool.com/results&quot;&gt;Launch School Capstone students&lt;/a&gt; earn 
in the US, so I needed to tune my own expectations to the realities of the French engineering
market.&lt;/p&gt;

&lt;p&gt;I approached the job search exercise quite boldly. I had previously hired and interviewed dozens
of candidates, and I think this experience taught me quite a few things on how to craft a good
application. Therefore, I didn’t waste my time sending dozens of applications to positions I didn’t
even know. Instead, I researched the companies that I liked and tried to envision myself working
there. Once I could, I tried to get in touch with their recruiters on Linkedin (recruiters are
craving for connections with engineers so it usually is pretty easy), in order to directly send them
my carefully crafted application. I also contacted my network in order to know whether any 
fitting position was opened. This led to interesting leads that never went through though.&lt;/p&gt;

&lt;p&gt;In the end, I applied to 5 companies, and received 2 offers - a third was perhaps
on the way, but I got hired before finishing the process. The two offers promised different things,
but in the end I chose the company that contacted me in the first place.&lt;/p&gt;

&lt;h2 id=&quot;interviews&quot;&gt;Interviews&lt;/h2&gt;

&lt;p&gt;Most companies I applied to were engineering-centric and had pretty similar processes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;a screening call (done by a recruiter) that mostly focuses on whether you’ve actually read the 
job opening and know the basics of the company&lt;/li&gt;
  &lt;li&gt;an on-site interview with a lead developer (with or without some live-coding)&lt;/li&gt;
  &lt;li&gt;a take-home project that takes between 2 and 4 hours&lt;/li&gt;
  &lt;li&gt;an on-site live-coding interview with another lead developer&lt;/li&gt;
  &lt;li&gt;a team lunch / dinner / drink to meet other people of the team and assess the cultural fit&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some companies switched steps 2 and 3, but the overall structure remained the same.&lt;/p&gt;

&lt;p&gt;As for the coding exercises in particular, I was surprised on how much emphasis there was on
actually building a small working application during the take-home projects. Most were about 
writing from scratch a small application with limited features, without forgetting a test suite.
I could usually choose the framework (and opted for Sinatra, of course!). I also made the mistake 
of discovering how APIs and JSON conversion worked during one of them!&lt;/p&gt;

&lt;p&gt;Live-coding exercises are always pretty stressful but I felt that probably was where I shined 
the most. I guess that endless study sessions with Launch School students definitely prepared me
on managing my stress level and on being able to think while I speak (a surprisinly difficult feat). 
It also didn’t hurt that I extensively prepared through Leetcode exercises and became familiar
with some algorithmic patterns.&lt;/p&gt;

&lt;p&gt;Here are some examples of live-coding exercises I was given:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;writing a new feature to my take-home project (that seems to be pretty common)&lt;/li&gt;
  &lt;li&gt;solving the &lt;a href=&quot;https://www.geeksforgeeks.org/understanding-the-coin-change-problem-with-dynamic-programming/&quot;&gt;coin change problem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;implementing from scratch the &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;my-company-and-position&quot;&gt;My company and position&lt;/h2&gt;

&lt;p&gt;I’m a proud full-stack software engineer at &lt;a href=&quot;https://shipup.co&quot;&gt;Shipup&lt;/a&gt;, a SaaS company that
helps online retailers create a better post-purchase experience for their customers (eg. better 
delivery tracking emails, integration with customer support in case there’s an issue with the
delivery, etc.)&lt;/p&gt;

&lt;p&gt;Basically, the company is extremely API-oriented: it’s integrated with dozens of different carriers
and provides multiple ways for online retailers to send them order data. The technical stack is a 
mix of Ruby on Rails and React.&lt;/p&gt;

&lt;p&gt;I’m still pretty new to the React world so my work has been mostly focused on Rails so far - but
I’m trying to do some 
&lt;a href=&quot;https://medium.com/launch-school/just-in-time-learning-f6a10886ddfe&quot;&gt;“just-in-time” learning&lt;/a&gt; in 
order to soon become proficient in React.&lt;/p&gt;

&lt;p&gt;Shipup is a small French startup, with only 25 employees so far (including 6 engineers). They’re
pretty ambitious and I can see these numbers rapidly growing in the upcoming months - I feel like it’s an
exciting time to join a company!&lt;/p&gt;

&lt;h2 id=&quot;bridging-the-gap-between-studying-and-working&quot;&gt;Bridging the gap between studying and working&lt;/h2&gt;

&lt;p&gt;I started working 3 weeks ago, and since then, I’ve had to learn an insane amount of tools 
and technologies. Here they are, with a personal assessment on how well I need to know them.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Tool&lt;/th&gt;
      &lt;th&gt;Importance?&lt;/th&gt;
      &lt;th&gt;Comment&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://rubyonrails.org/&quot;&gt;Rails&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Extremely&lt;/td&gt;
      &lt;td&gt;I was already pretty familiar with the framework&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://rspec.info/&quot;&gt;RSpec&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Extremely&lt;/td&gt;
      &lt;td&gt;I use it every day&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/bblimke/webmock&quot;&gt;WebMock&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Very important&lt;/td&gt;
      &lt;td&gt;Essential for API testing&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://lostisland.github.io/faraday/&quot;&gt;Faraday&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Important&lt;/td&gt;
      &lt;td&gt;Very useful for opening a persistent connection with an API&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Limited&lt;/td&gt;
      &lt;td&gt;I only use some specific commands and so far, I haven’t had to master anything Docker-related&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Limited&lt;/td&gt;
      &lt;td&gt;Same as Docker&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Extremely&lt;/td&gt;
      &lt;td&gt;Unfortunately I’m still very new to the framework so I feel a lot of pressure on quickly becoming up to speed&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Very important&lt;/td&gt;
      &lt;td&gt;Same as React&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://jestjs.io/&quot;&gt;Jest&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Very important&lt;/td&gt;
      &lt;td&gt;Fortunately, I already knew some basics&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://storybook.js.org/&quot;&gt;Storybook&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Very important&lt;/td&gt;
      &lt;td&gt;I’m still unfamiliar with this technology&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Important&lt;/td&gt;
      &lt;td&gt;Used for the corporate website&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;On top of that, I also have to acclimatize to this gigantic codebase, to the various APIs I have
to work with, and to using a specific git workflow.&lt;/p&gt;

&lt;p&gt;I guess it becomes easier with time, but the first few weeks have been packed with discoveries and
frustration at my own ignorance.&lt;/p&gt;

&lt;p&gt;The hardest and central part of my job seems to be “making every tool work together”, surprisingly.
I usually do not tackle difficult puzzle or code challenge - most of my Ruby knowledge is more 
than enough to solve the problems I’m faced with. However, identifying the problem(s) and 
unveiling the various problematic layers take a lot of patience and pugnacity. Finding what to do
is where most of my job resides - actually coding it is the easy part.&lt;/p&gt;

&lt;p&gt;So far, I’ve had to build 2 features, that demanded an in-depth understanding of the core business 
and the existing codebase. Before writing a single line of code, I’ve had to dive deep in various
files in order to actually understand what the hell was going on there. It doesn’t help that my
first weeks were done remotely (covid, again) and that I’m not very good at asking for help when
I need it - I’m working on that though.&lt;/p&gt;

&lt;h2 id=&quot;useful-resources&quot;&gt;Useful resources&lt;/h2&gt;

&lt;p&gt;Launch School’s core curriculum provides strong programming foundations, and is not meant to be
exhaustive. Here are some resources that helped me build on these foundations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Preparing for interviews:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://pragprog.com/titles/jwdsal2/&quot;&gt;A Common Sense Guide to Data Structures and Algorithms&lt;/a&gt;
by Jay Wengrow&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.crackingthecodinginterview.com/&quot;&gt;Cracking the Coding Interview&lt;/a&gt; by 
&lt;a href=&quot;http://www.gayle.com/&quot;&gt;Gayle Laakmann McDowell&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ruby on Rails:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.railstutorial.org/&quot;&gt;Rails Tutorial&lt;/a&gt; by 
&lt;a href=&quot;https://www.michaelhartl.com/&quot;&gt;Michael Hartl&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://launchschool.com/books/demystifying_rails&quot;&gt;Demystifying Rails&lt;/a&gt; by 
&lt;a href=&quot;https://launchschool.com&quot;&gt;Launch School&lt;/a&gt; (free)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;React:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.newline.co/fullstack-react/&quot;&gt;Fullstack React&lt;/a&gt; by &lt;a href=&quot;https://www.newline.co/&quot;&gt;Newline&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;APIs:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://launchschool.com/books/working_with_apis/&quot;&gt;Working with Web APIs&lt;/a&gt; by 
&lt;a href=&quot;https://launchschool.com&quot;&gt;Launch School&lt;/a&gt; (free)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;final-notes&quot;&gt;Final Notes&lt;/h2&gt;

&lt;p&gt;I’ve been asked a couple of questions by other Launch School students - I’ll try to answer them 
here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In my job search, which industry did I target?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I didn’t target any specific industry. However, I did target one &lt;em&gt;type&lt;/em&gt; of company: SaaS companies
(as in &lt;a href=&quot;https://www.techradar.com/news/what-is-saas&quot;&gt;Software as a Service&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;My goal was to join a company where the technical team was a &lt;em&gt;profit-center&lt;/em&gt; rather than a 
&lt;em&gt;cost-center&lt;/em&gt;, ie. where the product shipped by the engineers was the main money-maker of 
the company. I felt that SaaS startups fit that description pretty well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Any surprises during the job interviews?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The highs and lows of job searching are exhausting. Between applications, screening calls, 
interviews, take-home projects and preparing for the future interviews, job searching is a full 
time job. In my experience, it’s not compatible with other things like still working for your 
previous job, advancing through the curriculum or caring for anything else.&lt;/p&gt;

&lt;p&gt;As for the interviews themselves, I was surprised by how awkward some companies were regarding 
promoting diversity. I felt extremely uncomfortable when a recruiter candidly told me that they
would get an additional bonus for recruiting a female software engineer - ugh, okay.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is there anything I wished was covered by the LS curriculum?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, I’ll start by saying how grateful I am that the Networking course is that much in-depth. 
I use this knowledge on an everyday basis.&lt;/p&gt;

&lt;p&gt;As stated in the prevous section, I have used numerous resources to complement my Launch School
knowledge. Most of these resources are not based on ‘fundamental knowledge’ - I need them because
I use these technologies at my workplace, not because of their intrinsic value.&lt;/p&gt;

&lt;p&gt;However, there are two topics that I think should be covered more in LS (or at least seem
pretty fundamental to me):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Data Structure and Algorithms&lt;/li&gt;
  &lt;li&gt;Web APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That being said, it’s pretty easy to pick up a book about these topics once you’ve worked 
through the Core curriculum.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How is using git ‘in real life’?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Short answer: not that difficult and awesome!&lt;/p&gt;

&lt;p&gt;Most companies have their own version of a git workflow. We use 
&lt;a href=&quot;https://www.endoflineblog.com/oneflow-a-git-branching-model-and-workflow&quot;&gt;oneflow&lt;/a&gt;, which is 
a simplified version of 
&lt;a href=&quot;https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow&quot;&gt;git flow&lt;/a&gt; 
(which seems to be pretty widespread).&lt;/p&gt;

&lt;p&gt;Using git &lt;em&gt;in real life&lt;/em&gt; is mostly, to me:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Always working on a separate branch&lt;/li&gt;
  &lt;li&gt;Being extremely careful with how I name my commits&lt;/li&gt;
  &lt;li&gt;…and with &lt;em&gt;what&lt;/em&gt; I commit (&lt;code class=&quot;highlighter-rouge&quot;&gt;git add --patch&lt;/code&gt; is my new best friend)&lt;/li&gt;
  &lt;li&gt;Constantly rewriting my local git history (&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase -i origin/master&lt;/code&gt;) so that my commits
are self-explanatory and grouped logically&lt;/li&gt;
  &lt;li&gt;Always making a Pull Request once I’m done with my feature (to allow my colleagues to review
my work)&lt;/li&gt;
  &lt;li&gt;Merging with incredible care into &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;And going through the CI/CD pipeline before deploying to production&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What’s unique about France’s tech industry compared to the US?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’ve never worked in the US and can only guess.&lt;/p&gt;

&lt;p&gt;I think the main difference is the type of companies you can work with here. You won’t find any 
tech giant like in the Bay Area or New York. The biggest engineering companies probably have a 
maximum of a 100 engineers. Therefore, your options are limited to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;tech startups (my choice)&lt;/li&gt;
  &lt;li&gt;IT services companies (tech consultancy)&lt;/li&gt;
  &lt;li&gt;companies with a ‘cost-center’ IT department (and you’d rather avoid these)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Paris is a great place for tech startups, and I guess that most major cities (Lyon, Lille, 
Bordeaux…) have some bubbling startup activity but I wouldn’t expect it to be true elsewhere. 
In short, there are only a handful of cities where some interesting engineering work can be found.&lt;/p&gt;

&lt;p&gt;Also, English truly is the main language for software engineering - even in France. Most of my 
meetings, all of the code and all the documentation is in English. That caught me a bit off-guard
in a country that fought so long against the invasion of the English language. (In all seriousness, 
the &lt;a href=&quot;http://www.academie-francaise.fr/dire-ne-pas-dire/neologismes-anglicismes&quot;&gt;French academy&lt;/a&gt; has
a list of English phrases that &lt;em&gt;should&lt;/em&gt; be replaced by French sentences.)&lt;/p&gt;

&lt;p&gt;Finally, I should mention that the tech industry salaries definitely are above average in France, 
but are &lt;em&gt;not&lt;/em&gt; exponentially inflated like they are in some US cities. Realistic figures are between
€35-40,000 (graduate) and €100,000 (experienced manager) - and 
&lt;a href=&quot;https://www.numbeo.com/cost-of-living/in/Paris&quot;&gt;Paris&lt;/a&gt; has a pretty high cost of life as well.&lt;/p&gt;

&lt;p&gt;In short, while most software engineers have a better wage than most here, it’s not exactly
as insanely profitable as it is in the US.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Alright! This has been a wildly long article, and I hope you found it useful.
Don’t hesitate to get in touch with me if you have some further questions, and I wish you all
the best on your programming journey!&lt;/p&gt;</content><author><name>Juliette Sinibardy</name></author><category term="Programming" /><category term="Blogging" /><category term="Learning" /><category term="First days in a company" /><category term="Software engineer" /><category term="Job searching" /><category term="Interviews" /><category term="Launch School" /><summary type="html">After a year of solitary learning, I’ve finally started my first software engineering job. I’m excited, exhausted and extremely grateful for the path that led me here. I loved to read career switching stories so I thought I’d give a shot at writing my own.</summary></entry><entry><title type="html">Using Metaprogramming to Pass an Argument to a Rails Module</title><link href="http://localhost:4000/rails-metaprogramming-pass-argument-to-module" rel="alternate" type="text/html" title="Using Metaprogramming to Pass an Argument to a Rails Module" /><published>2020-04-06T15:35:00+02:00</published><updated>2020-04-07T10:25:00+02:00</updated><id>http://localhost:4000/using-metaprogramming-to-pass-an-argument-to-a-rails-module</id><content type="html" xml:base="http://localhost:4000/rails-metaprogramming-pass-argument-to-module">&lt;p&gt;&lt;strong&gt;Refactoring&lt;/strong&gt; is my favorite hobby. Nothing feels quite as satisfying than 
extracting some common methods to an elegantly named module.&lt;/p&gt;

&lt;p&gt;Quickly though, I usually run into trouble - how exactly am I supposed to pass an 
argument to a module in Ruby? The answer is: through some &lt;strong&gt;metaprogramming&lt;/strong&gt;!
(&lt;em&gt;such a scary word&lt;/em&gt;)&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Let’s draft up a (somewhat contrived) example using Ruby on Rails.&lt;/p&gt;

&lt;p&gt;Imagine a Facebook-like application with the following models and &lt;code class=&quot;highlighter-rouge&quot;&gt;Likeable&lt;/code&gt; 
module:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jsiny/0baf8980901e299d9534e0d2fae828eb.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Through the &lt;code class=&quot;highlighter-rouge&quot;&gt;Likeable&lt;/code&gt; module, we can now retrieve the total number of likes for
any instance of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Image&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;Video&lt;/code&gt;) class with the following pattern: 
&lt;code class=&quot;highlighter-rouge&quot;&gt;Image.find(params[:id]).total_likes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That’s pretty neat.&lt;/p&gt;

&lt;p&gt;Now, let’s assume that the two classes handle differently which users get 
notified when a new like is submitted. As it’s related to likes, we’d like to
include this behaviour within the &lt;code class=&quot;highlighter-rouge&quot;&gt;Likeable&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;However, Ruby does &lt;em&gt;not&lt;/em&gt; provide an easy way to pass an argument to a method
defined within a module. We could of course add some conditional logic to the
module method, but that would become messy quickly as we create other 
classes mixed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Likeable&lt;/code&gt; module.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jsiny/699caa3540195819b844194b0f167412.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Let’s &lt;em&gt;not&lt;/em&gt; do that.&lt;/p&gt;

&lt;p&gt;Instead, we’d like to be able to directly define who should be notified for 
each class within the model, like so:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jsiny/15bb9e42c214db82cdfee5a1800f2d1d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Turns out, we can use some metaprogramming to mimic the passing of an argument:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jsiny/40b97c1ea25599c0c468b6cfcd322716.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Here’s what this code does:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Lines 5-7: when the module &lt;code class=&quot;highlighter-rouge&quot;&gt;Likeable&lt;/code&gt; is included within the class, the 
(Rails) class attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;users_to_be_notified&lt;/code&gt; is created.&lt;/li&gt;
  &lt;li&gt;Lines 18-22: Within the &lt;code class=&quot;highlighter-rouge&quot;&gt;Likeable&lt;/code&gt; module is defined the class method 
&lt;code class=&quot;highlighter-rouge&quot;&gt;notifiable_users&lt;/code&gt;. This method sets &lt;code class=&quot;highlighter-rouge&quot;&gt;users_to_be_notified&lt;/code&gt; to the
parameters.&lt;/li&gt;
  &lt;li&gt;Line 34: &lt;code class=&quot;highlighter-rouge&quot;&gt;notifiable_users :creator, :tagged_users&lt;/code&gt;: the &lt;code class=&quot;highlighter-rouge&quot;&gt;notifiable_users&lt;/code&gt; 
class method is called with two arguments (representing ActiveRecord attributes).
This sets the class attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;users_to_be_notified&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;[:creator, 
:tagged_users]&lt;/code&gt; (for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Video&lt;/code&gt; class).&lt;/li&gt;
  &lt;li&gt;Line 14: we retrieve the values behind &lt;code class=&quot;highlighter-rouge&quot;&gt;:creator&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:tagged_users&lt;/code&gt; for 
the specific instances of the class, and notify them individually.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can now create a new class and easily define who gets notified for new
likes:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jsiny/af94934e767fa0da4f721544278628d4.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;There you go!&lt;/p&gt;</content><author><name>Juliette Sinibardy</name></author><category term="Rails" /><category term="Ruby" /><category term="Metaprogramming" /><category term="Ruby on rails" /><category term="Module" /><category term="How-To" /><summary type="html">Refactoring is my favorite hobby. Nothing feels quite as satisfying than extracting some common methods to an elegantly named module. Quickly though, I usually run into trouble - how exactly am I supposed to pass an argument to a module in Ruby? The answer is: through some metaprogramming! (such a scary word)</summary></entry><entry><title type="html">Introducing Deep Sea Adventure’s Scoring App</title><link href="http://localhost:4000/deep-sea-adventure" rel="alternate" type="text/html" title="Introducing Deep Sea Adventure's Scoring App" /><published>2019-11-13T09:42:00+01:00</published><updated>2019-11-13T11:23:00+01:00</updated><id>http://localhost:4000/introducing-deep-sea-adventure-s-scoring-app</id><content type="html" xml:base="http://localhost:4000/deep-sea-adventure">&lt;p&gt;This &lt;a href=&quot;https://deep-sea-adventure.herokuapp.com/&quot;&gt;website&lt;/a&gt; is a &lt;strong&gt;scoring tool&lt;/strong&gt;
dedicated to the board game
&lt;a href=&quot;https://oinkgms.com/en/deep-sea-adventure&quot;&gt;Deep Sea Adventure&lt;/a&gt; edited by
&lt;a href=&quot;https://oinkgms.com/en/&quot;&gt;Oink Games&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Its goal is to provide players a &lt;strong&gt;reliable way to compute the oxygen decrease&lt;/strong&gt;
during a round. It’s meant to be used side by side with the board game,
either on a mobile or computer.&lt;/p&gt;

&lt;p&gt;After 6 months of learning, this project is my &lt;strong&gt;first&lt;/strong&gt; big, entirely personal
project, and I’m very proud of it.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://deep-sea-adventure.herokuapp.com/&quot;&gt;Visit the website&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/jsiny/deep_sea_adventure&quot;&gt;See on Github&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;!--more--&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#tech-stack&quot; id=&quot;markdown-toc-tech-stack&quot;&gt;Tech Stack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#challenges&quot; id=&quot;markdown-toc-challenges&quot;&gt;Challenges&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#motivation&quot; id=&quot;markdown-toc-motivation&quot;&gt;Motivation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#screenshots&quot; id=&quot;markdown-toc-screenshots&quot;&gt;Screenshots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tech-stack&quot;&gt;Tech Stack&lt;/h2&gt;

&lt;p&gt;This tool has been developed in &lt;strong&gt;Ruby&lt;/strong&gt;, as I’ve spent the past months
learning programming through that language. I’ve applied an object-oriented
design as it felt natural to segment the various elements into objects with
an interface (&lt;code class=&quot;highlighter-rouge&quot;&gt;Players&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Round&lt;/code&gt;, etc.)&lt;/p&gt;

&lt;p&gt;I’ve chosen to develop the website through the light-weight, Ruby 
domain-specific language &lt;strong&gt;Sinatra&lt;/strong&gt;. Even though I’ve previously worked with
Ruby on Rails, I preferred using a lighter library rather than a comprehensive
framework that may hide away the complexity of web applications.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Homepage&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;erb&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:home&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For instance, this Sinatra code snippet means that a &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; request to the
homepage (&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;) will trigger the loading of the ERB (embedded Ruby) template
&lt;code class=&quot;highlighter-rouge&quot;&gt;home.erb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As the project grew in complexity, I’ve added a comprehensive test suite (with
&lt;strong&gt;Minitest&lt;/strong&gt;), in order to be able to safely refactor and prevent regressions.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/minitest.jpg&quot;&gt;
            &lt;img src=&quot;/assets/images/minitest.jpg&quot; alt=&quot;Minitest&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;All green! 💚&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Additionally, I taught myself to work with &lt;strong&gt;Bootstrap&lt;/strong&gt; for this project.
Being a complete beginner in front-end development, with no knowledge of
JavaScript and only the very basics of CSS, this proved to be quite
challenging.&lt;/p&gt;

&lt;p&gt;However, I’m happy I went through that struggle because Bootstrap helped me
build a smooth and user-friendly application (both on desktop &lt;em&gt;and&lt;/em&gt; mobile).&lt;/p&gt;

&lt;p&gt;I’ve deployed the application on &lt;strong&gt;Heroku&lt;/strong&gt;, mostly because it’s a 
free hosting service. (The app is hosted onto an EU server, so US-based
users might encounter some latency.)&lt;/p&gt;

&lt;p&gt;Finally, I also took the opportunity to learn about &lt;strong&gt;Travis CI&lt;/strong&gt; and set up
my first continuous integration and automatic deployment, through
&lt;code class=&quot;highlighter-rouge&quot;&gt;Github &amp;gt; Travis CI &amp;gt; Heroku&lt;/code&gt;. As I was working alone on this project,
this configuration probably is a luxury, but it’s never too early to learn
the best practices.&lt;/p&gt;

&lt;h2 id=&quot;challenges&quot;&gt;Challenges&lt;/h2&gt;

&lt;p&gt;Through this project, I’ve faced two main challenges:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I had to learn the basics of front-end and Bootstrap to go through it&lt;/li&gt;
  &lt;li&gt;I wanted to build an application &lt;em&gt;with no database and log-in system&lt;/em&gt; so
instead, I extensively used session storage to persist user data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Why did I choose to steer clear of login and databases?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mainly because I think that most users find it tiresome to go through a
registration process for almost every Internet service. A “plug and play”
approach is much nicer instead.&lt;/p&gt;

&lt;p&gt;Plus, in this situation, using session storage worked pretty well because:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Most games last less than 1 hour so sessions expiring was not a concern&lt;/li&gt;
  &lt;li&gt;Even though several players could want to keep score, it feels acceptable
that they use only one player’s device.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;I’ve chosen to build this app mostly because I like games but dislike
arguing over a messy count score.&lt;/p&gt;

&lt;p&gt;In Deep Sea Adventure, players dive into the deep ocean looking for treasures.
All divers share the same oxygen tank, and each treasure picked up weighs down
the diver and increases its oxygen intake. All divers must be back into the
submarine before the oxygen tank becomes empty. As such, it is critical to
accurately monitor the available oxygen. (&lt;a href=&quot;https://oinkgms.com/en/deep-sea-adventure&quot;&gt;More on the game’s rules&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;However, experience shows that it can be difficult to accurately compute the
available oxygen in a quick game setup, and that arguments over which player
should have drowned tend to ruin the fun. This is where this Scoring App comes
handy!&lt;/p&gt;

&lt;h2 id=&quot;screenshots&quot;&gt;Screenshots&lt;/h2&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/player_turn.png&quot;&gt;
            &lt;img src=&quot;/assets/images/player_turn.png&quot; alt=&quot;Deep Sea Adventure - Player's turn&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;The app records the choices made by the player and displays the available oxygen supply&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/score.png&quot;&gt;
            &lt;img src=&quot;/assets/images/score.png&quot; alt=&quot;Deep Sea Adventure - Score&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;At the end of the round, players who made it back to the submarine count their treasures&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/end.png&quot;&gt;
            &lt;img src=&quot;/assets/images/end.png&quot; alt=&quot;Deep Sea Adventure - Score&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;After 3 rounds, the app computes the scoreboard&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;</content><author><name>Juliette Sinibardy</name></author><category term="Ruby" /><category term="Sinatra" /><category term="Bootstrap" /><category term="Heroku" /><category term="Travis CI" /><category term="Minitest" /><category term="Project" /><category term="Learning" /><category term="Deep Sea Adventure" /><category term="Game" /><summary type="html">This website is a scoring tool dedicated to the board game Deep Sea Adventure edited by Oink Games. Its goal is to provide players a reliable way to compute the oxygen decrease during a round. It’s meant to be used side by side with the board game, either on a mobile or computer. After 6 months of learning, this project is my first big, entirely personal project, and I’m very proud of it. Visit the website See on Github</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/end.png" /></entry><entry><title type="html">How does the Internet work?</title><link href="http://localhost:4000/how-internet-works" rel="alternate" type="text/html" title="How does the Internet work?" /><published>2019-10-03T11:06:00+02:00</published><updated>2019-10-03T19:50:00+02:00</updated><id>http://localhost:4000/how-does-the-internet-work</id><content type="html" xml:base="http://localhost:4000/how-internet-works">&lt;p&gt;Being born in the 90s, I’ve lived most of my life in a post-Internet world. I
do remember the sweet sound of 56 kb/s modem, but most of my browsing time
has been &lt;em&gt;after&lt;/em&gt; the dial-up era.&lt;/p&gt;

&lt;p&gt;Internet, for my generation, is just an inherent part of life. It’s kind
of hard to imagine what it was like &lt;em&gt;before&lt;/em&gt; (did people actually read books?),
and we never pause to think:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Wait, how does the Internet even work?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So &lt;em&gt;that&lt;/em&gt;’s exactly the subject of this post. Buckle up your
seatbelt, we’re going deep into networking!&lt;/p&gt;

&lt;!--more--&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/internet.jpg&quot;&gt;
            &lt;img src=&quot;/assets/images/internet.jpg&quot; alt=&quot;90s Internet book&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;Welcome to the Internet! I'll be your guide&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;We’ll examine two aspects of the Internet:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;how data is &lt;em&gt;transferred&lt;/em&gt; over the network&lt;/li&gt;
  &lt;li&gt;how users can &lt;em&gt;access a webpage&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents:&lt;/strong&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#how-data-is-transferred-over-a-network&quot; id=&quot;markdown-toc-how-data-is-transferred-over-a-network&quot;&gt;How data is transferred over a network&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#url-parsing&quot; id=&quot;markdown-toc-url-parsing&quot;&gt;URL Parsing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#dns-lookup&quot; id=&quot;markdown-toc-dns-lookup&quot;&gt;DNS Lookup&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#encapsulating-the-request&quot; id=&quot;markdown-toc-encapsulating-the-request&quot;&gt;Encapsulating the Request&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#travelling-on-the-network&quot; id=&quot;markdown-toc-travelling-on-the-network&quot;&gt;Travelling on the network&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#receiving-the-request&quot; id=&quot;markdown-toc-receiving-the-request&quot;&gt;Receiving the Request&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-access-a-webpage&quot; id=&quot;markdown-toc-how-to-access-a-webpage&quot;&gt;How to access a webpage&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#the-tcp-handshake&quot; id=&quot;markdown-toc-the-tcp-handshake&quot;&gt;The TCP Handshake&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-tls-handshake&quot; id=&quot;markdown-toc-the-tls-handshake&quot;&gt;The TLS Handshake&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-http-request--response-cycle&quot; id=&quot;markdown-toc-the-http-request--response-cycle&quot;&gt;The HTTP Request / Response cycle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#internet---better-than-magic&quot; id=&quot;markdown-toc-internet---better-than-magic&quot;&gt;Internet - better than magic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;how-data-is-transferred-over-a-network&quot;&gt;How data is transferred over a network&lt;/h2&gt;

&lt;p&gt;What happens when you type a URL into your browser?&lt;/p&gt;

&lt;p&gt;Let’s assume you want to reach Twitter, and typed &lt;code class=&quot;highlighter-rouge&quot;&gt;https://twitter.com/home&lt;/code&gt;
into your browser.&lt;/p&gt;

&lt;h3 id=&quot;url-parsing&quot;&gt;URL Parsing&lt;/h3&gt;

&lt;p&gt;The first thing your browser does is &lt;em&gt;parse&lt;/em&gt; the URL, in order to extract
its components:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the &lt;strong&gt;scheme&lt;/strong&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;), which informs the browser that we want to use 
the HyperText Transfor Protocol Secure to exchange data with the server;&lt;/li&gt;
  &lt;li&gt;the &lt;strong&gt;host&lt;/strong&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;twitter.com&lt;/code&gt;), which is the computer that &lt;em&gt;hosts&lt;/em&gt; the 
resources of this website (eg. the HTML, the pictures, etc.);&lt;/li&gt;
  &lt;li&gt;the &lt;strong&gt;path&lt;/strong&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt;), which corresponds to the particular resource we 
want to access.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dns-lookup&quot;&gt;DNS Lookup&lt;/h3&gt;

&lt;p&gt;The domain name (&lt;code class=&quot;highlighter-rouge&quot;&gt;twitter.com&lt;/code&gt;) typed is nothing more than a human-friendly name
that refers to a server somewhere on the Internet.&lt;/p&gt;

&lt;p&gt;In order for data to be transferred to this server, we need to know
its &lt;strong&gt;IP address&lt;/strong&gt;. IP addresses (v4) are sets of 4 numbers (from 0 to 255)
separated by dots &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;, like &lt;code class=&quot;highlighter-rouge&quot;&gt;104.244.42.193&lt;/code&gt;. This logicial address is &lt;em&gt;unique&lt;/em&gt;
and allows to locate a device on the internet.&lt;/p&gt;

&lt;p&gt;As IP addresses would be hard to remember for humans with limited memory
slots, we use domain names to cover up this complexity. But how do we convert
a domain name into an IP address?&lt;/p&gt;

&lt;p&gt;That’s where &lt;strong&gt;DNS&lt;/strong&gt; (Domain Name System) comes in! The DNS is a distributed
database which translates a domain name into an IP address.&lt;/p&gt;

&lt;p&gt;When you typed &lt;code class=&quot;highlighter-rouge&quot;&gt;https://twitter.com/home&lt;/code&gt; into your browser, it first checked
whether &lt;code class=&quot;highlighter-rouge&quot;&gt;twitter.com&lt;/code&gt; was already available in its cache (from a previous
browsing session). If it wasn’t, the browser used its DNS provider in order 
to find the IP address associated with the domain name (and cached the answer
for later use).&lt;/p&gt;

&lt;h3 id=&quot;encapsulating-the-request&quot;&gt;Encapsulating the Request&lt;/h3&gt;

&lt;p&gt;As we are in possession of &lt;code class=&quot;highlighter-rouge&quot;&gt;twitter.com&lt;/code&gt;’s IP address, we are now ready to
send a request to the server!&lt;/p&gt;

&lt;p&gt;The browser thus takes the server’s IP address and combines it with the
port number (optional field from the URL) to create a &lt;strong&gt;socket&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This request is then passed through several layers where the data is further
encapsulated.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/wrapped-cat.gif&quot;&gt;
            &lt;img src=&quot;/assets/images/wrapped-cat.gif&quot; alt=&quot;Cat wrapped in Chritsmas wrapping paper&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;Example of a cat being encapsulated, with a nice bow header&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;First, the request is passed to the &lt;strong&gt;Transport Layer&lt;/strong&gt;, where a TCP
segment (or UDP datagram) is crafted. This segment now has a &lt;em&gt;header&lt;/em&gt;, which
includes the following information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the destination port (which defaults to 80 for HTTP and 443 for HTTPS)&lt;/li&gt;
  &lt;li&gt;the source port (chosen from the kernel’s available range)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These network ports is what allows two specific processes on two different
devices to communicate. A device likely has multiple processes running
at the same time (eg. a browser connected to multiple websites, a Spotify
application running in the background, your email client, etc.), with
each having a special dedicated network port.&lt;/p&gt;

&lt;p&gt;Second, the segment is sent to the &lt;strong&gt;Network Layer&lt;/strong&gt;, where it is wrapped
with additional headers containing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the destination IP address (obtained through the DNS mapping of the URL)&lt;/li&gt;
  &lt;li&gt;the source IP address (your device’s IP address)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The segment is now an IP packet.&lt;/p&gt;

&lt;p&gt;Third, the packet is sent to the &lt;strong&gt;Link Layer&lt;/strong&gt;, where another header is added,
containing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the source MAC address (of the device’s NIC)&lt;/li&gt;
  &lt;li&gt;the destination MAC address (at this point being the exit gateway’s address,
ie. the local router’s)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fourth, the &lt;strong&gt;Physical Layer&lt;/strong&gt;. The frame is converted to binary data and sent
through the physicial medium (eg. Ethernet cable, optic fiber, radio waves)
linking your device to the rest of the network.&lt;/p&gt;

&lt;p&gt;At this point, the frame is now ready for the great travel throughout the
unknown network beyond your local router!&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/adventure.gif&quot;&gt;
            &lt;img src=&quot;/assets/images/adventure.gif&quot; alt=&quot;Adventure through the unknown&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;Good luck tiny packet!&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;travelling-on-the-network&quot;&gt;Travelling on the network&lt;/h3&gt;

&lt;p&gt;The internet is a vast &lt;em&gt;network of networks&lt;/em&gt;, which connects your home local
network to an infinite information sphere (the &lt;em&gt;Web&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Once the packet leaves your local network through the subnet’s router, it
needs to find its way up to its destination IP (featured within its Network
Layer header).&lt;/p&gt;

&lt;p&gt;On its way, the packet will encounter &lt;strong&gt;routers&lt;/strong&gt;, which will extract its 
destination IP and orient it to the next relevant network hop. The route
taken by the packet is not necessarily the &lt;em&gt;shortest&lt;/em&gt;: among other things,
routers take into account the network congestion when deciding how to
route packets.&lt;/p&gt;

&lt;p&gt;If the packet errs for too long on the network (ie. when its Time-to-Live
countdown equals 0), it will be dropped mercilessly.&lt;/p&gt;

&lt;p&gt;Additionally, if a router is overflowed with packets, it will not hesitate
to shamelessly abandon the next packets.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/computer-destruction.gif&quot;&gt;
            &lt;img src=&quot;/assets/images/computer-destruction.gif&quot; alt=&quot;IT guy destroying a computer with a hammer&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;Accurate depiction of a router murdering an IP packet&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Being a packet on the internet is tough.&lt;/p&gt;

&lt;p&gt;All this also means that the internet is essentially an &lt;em&gt;unreliable&lt;/em&gt; network.
Fortunately, we’ve invented protocols to abstract away from this 
unreliability: this is the role of the Transport Control Protocol (see below).&lt;/p&gt;

&lt;p&gt;Let’s assume here that our packet has a safe travel and reaches its destination
server (congrats tiny packet!)&lt;/p&gt;

&lt;h3 id=&quot;receiving-the-request&quot;&gt;Receiving the Request&lt;/h3&gt;

&lt;p&gt;When the packet gets to the destination host, it has to go through the same
encapsulation layers, but in reverse order, in order to strip off all the
header information that was attached by the sender for a safe navigation
on the internet seas.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Physical Layer receives a frame containing the packet, and sends it to
the Link Layer.&lt;/li&gt;
  &lt;li&gt;The Link Layer verifies that the frame is intact (through its checksum), and
removes the frame header, before sending it to the Internet Layer.&lt;/li&gt;
  &lt;li&gt;The Internet Layer assembles the fragmented packets into the original
datagram. It also removes the packet header before sending the datagram
over to the Transport Layer.&lt;/li&gt;
  &lt;li&gt;The Transport Layer (in our example, TCP) uses the destination port
(contained in the header) to know to which application to route
the request. It removes the Transport headers and sends the segment to the
Application Layer.&lt;/li&gt;
  &lt;li&gt;The Application Layer receives the segment and performs the requested
operation.&lt;/li&gt;
&lt;/ol&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/phew.gif&quot;&gt;
            &lt;img src=&quot;/assets/images/phew.gif&quot; alt=&quot;Jeff Goldblum sighing&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;Our tiny packet made it all the way!&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Our original request has now arrived to the server. However, that doesn’t
explain &lt;em&gt;how&lt;/em&gt; our browser communicates with a remote server. For all we know,
our request could have been immediately dropped by the server because
it didn’t speak &lt;em&gt;the same language&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So - how does our browser communicate with a web server? To answer this
question, we will now explore HTTP, the Web Protocol.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;how-to-access-a-webpage&quot;&gt;How to access a webpage&lt;/h2&gt;

&lt;p&gt;A web page is a document written in HTML, with references to various 
resources (images, videos, etc.)&lt;/p&gt;

&lt;p&gt;However, the browser and the server exchange quite a lot before displaying 
a webpage onto your screen. There are several round-trips of exchanges 
before a single HTTP request is sent to the server.&lt;/p&gt;

&lt;h3 id=&quot;the-tcp-handshake&quot;&gt;The TCP Handshake&lt;/h3&gt;

&lt;p&gt;One of these exchanges correspond to the TCP handshake, ie. the way our
browser establishes a &lt;em&gt;connection&lt;/em&gt; to a remote server.&lt;/p&gt;

&lt;p&gt;This handshake goes a little bit like this:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Browser: “Hey server, I have something to ask you, do you mind?” [&lt;code class=&quot;highlighter-rouge&quot;&gt;SYN&lt;/code&gt;]&lt;/li&gt;
  &lt;li&gt;Server: “Hey browser, I’m listening. What do you want?” [&lt;code class=&quot;highlighter-rouge&quot;&gt;SYN ACK&lt;/code&gt;]&lt;/li&gt;
  &lt;li&gt;Browser: “Cool! I’ll tell you what I want” [&lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt;]&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/syn-ack.jpg&quot;&gt;
            &lt;img src=&quot;/assets/images/syn-ack.jpg&quot; alt=&quot;SYN ACK joke&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;I'll tell you what I want, what I really really want!&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Once the browser has sent the last &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; segment, it can now start sending
data to the server.&lt;/p&gt;

&lt;p&gt;Using the Transport Control Layer protocol ensures that the 
exchange of data is now being done onto a reliable network.
One a connection is established, TCP takes care of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Checking that the data has not been altered during transit&lt;/li&gt;
  &lt;li&gt;Checking that the various segments are all here, and if not, supervises
the retransmission of lost packets&lt;/li&gt;
  &lt;li&gt;Logically ordering the packets&lt;/li&gt;
  &lt;li&gt;De-duplicating the packets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TCP effectively allows us to abstract away from the unreliability of the
lower-layer protocols. However, this reliability comes at the price of
performance, as TCP requires an entire round-trip of latency before the
browser can send its request.&lt;/p&gt;

&lt;h3 id=&quot;the-tls-handshake&quot;&gt;The TLS Handshake&lt;/h3&gt;

&lt;p&gt;Furthermore, if the URL’s scheme is &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt; (which it is, in our example), we
need another exchange before the HTTP requests can begin. This exchange
will ensure the &lt;strong&gt;encryption&lt;/strong&gt; of all subsequent HTTP requests between 
the client and the server, and &lt;strong&gt;authenticate&lt;/strong&gt; the host.&lt;/p&gt;

&lt;p&gt;Here’s a broad picture of how this handshake works:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Browser: “Here’s the TLS version I support, and here are my favourite
cipher suites” [&lt;code class=&quot;highlighter-rouge&quot;&gt;ClientHello&lt;/code&gt;]&lt;/li&gt;
  &lt;li&gt;Server: “Okay so let’s use this TLS version, this cipher, and by the way, 
here are my public certificate and my public encryption key” [&lt;code class=&quot;highlighter-rouge&quot;&gt;ServerHello&lt;/code&gt;]&lt;/li&gt;
  &lt;li&gt;Browser: &lt;em&gt;checks the validity of the certificate&lt;/em&gt; “Ok you’re good!”&lt;/li&gt;
  &lt;li&gt;Browser: “Here’s how we’ll decide on a private symmetric key for encryption”&lt;/li&gt;
  &lt;li&gt;Server: “Copy 5/5! Will now start using this key for encryption”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This TLS handshake uses asymmetric encryption to agree on:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;which version of TLS to use&lt;/li&gt;
  &lt;li&gt;the exchange of symmetric encryption key&lt;/li&gt;
  &lt;li&gt;the validity of the host’s certificate&lt;/li&gt;
  &lt;li&gt;the cipher suite used&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the TLS handshake is completed, all messages exchanged between the server
and the browser are now encrypted.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/matrix.gif&quot;&gt;
            &lt;img src=&quot;/assets/images/matrix.gif&quot; alt=&quot;Neo from the Matrix&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;There is no spoon&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;the-http-request--response-cycle&quot;&gt;The HTTP Request / Response cycle&lt;/h3&gt;

&lt;p&gt;“Okay”, the browser asks timidly, “am I good to send my HTTP request now?” - 
Yes, dear browser, you can!&lt;/p&gt;

&lt;p&gt;The browser uses HTTP, a protocol designed for the communication between
a browser and a server, to ask the server for a particular web page.&lt;/p&gt;

&lt;p&gt;The requests are sent in plaintext and would look like this:&lt;/p&gt;

&lt;div class=&quot;language-http highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/home&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;twitter.com&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;[Other headers]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The HTTP request (v1.1) features a request line, one mandatory header (&lt;code class=&quot;highlighter-rouge&quot;&gt;Host&lt;/code&gt;)
and ends with an empty line.&lt;/p&gt;

&lt;p&gt;Here are the components from the request line:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; is the HTTP request method, which tells the server what we want
to do with the resource (in this case, to retrieve it)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt; is the path of the resource we want to access&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP/1.1&lt;/code&gt; is the version of the HTTP protocol we want to use&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The server receives the request, and responds, also in plain text:&lt;/p&gt;

&lt;div class=&quot;language-http highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;200 OK
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This status line (which indicates that the request was processed successfully)
can be accompanied with optional headers and body, like the raw HTML that
composes Twitter’s home page:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fr&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-scribe-reduced-action-queue=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Rest of the page --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the HTTP response contains references to other resources (like images,
fonts, or scripts), our browser automatically sends new HTTP requests to
collect them. If these resources are hosted on a different domain than 
the current one, the whole TCP / TLS process starts again for these new
domains.&lt;/p&gt;

&lt;p&gt;Now that our browser has everything it needs, it parses the HTML, CSS
and JavaScript files, and renders the web page. I’m still a newbie in 
front-end so this part of the explanation will be for a future article 🥺&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;internet---better-than-magic&quot;&gt;Internet - better than magic&lt;/h2&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/internet-surfing.gif&quot;&gt;
            &lt;img src=&quot;/assets/images/internet-surfing.gif&quot; alt=&quot;Surfer between internet memes&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;Here we are, surfing on the web!&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Turns out: internet is &lt;em&gt;actually&lt;/em&gt; a tangible thing that can be explained!&lt;/p&gt;

&lt;p&gt;But it’s still damn hard to do so.&lt;/p&gt;</content><author><name>Juliette Sinibardy</name></author><category term="Learning" /><category term="How-To" /><category term="Launch School" /><category term="Internet" /><category term="OSI Model" /><category term="HTTP" /><category term="TCP" /><category term="IP" /><category term="DNS" /><category term="TLS" /><summary type="html">Being born in the 90s, I’ve lived most of my life in a post-Internet world. I do remember the sweet sound of 56 kb/s modem, but most of my browsing time has been after the dial-up era. Internet, for my generation, is just an inherent part of life. It’s kind of hard to imagine what it was like before (did people actually read books?), and we never pause to think: Wait, how does the Internet even work? So that’s exactly the subject of this post. Buckle up your seatbelt, we’re going deep into networking!</summary></entry><entry><title type="html">What’s up with the &amp;amp; (ampersand) in Ruby closures?</title><link href="http://localhost:4000/ampersand-ruby-closures" rel="alternate" type="text/html" title="What's up with the &amp; (ampersand) in Ruby closures?" /><published>2019-09-09T08:19:00+02:00</published><updated>2019-09-09T17:14:00+02:00</updated><id>http://localhost:4000/ampersand-&amp;-ruby-closures</id><content type="html" xml:base="http://localhost:4000/ampersand-ruby-closures">&lt;p&gt;Quite surprisingly, the following Ruby program is correct:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;second_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;second_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;third_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;third_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;first_method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &quot;hello!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You might therefore notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; (ampersand) pops up and disappears 
pretty randomly in the above program. As it’s pretty hard to wrap one’s head 
around all this &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; madness, let’s dive into this!&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#whats-a-closure&quot; id=&quot;markdown-toc-whats-a-closure&quot;&gt;What’s a closure?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#blocks&quot; id=&quot;markdown-toc-blocks&quot;&gt;Blocks&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#implicit-block-calling&quot; id=&quot;markdown-toc-implicit-block-calling&quot;&gt;Implicit Block-Calling&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#explicit-block-calling&quot; id=&quot;markdown-toc-explicit-block-calling&quot;&gt;Explicit Block-Calling&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the--within-a-method-call&quot; id=&quot;markdown-toc-the--within-a-method-call&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; within a method call&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#explaining-our-initial-example&quot; id=&quot;markdown-toc-explaining-our-initial-example&quot;&gt;Explaining our initial example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tldr---its-all-about-context&quot; id=&quot;markdown-toc-tldr---its-all-about-context&quot;&gt;TL;DR - It’s all about context!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;whats-a-closure&quot;&gt;What’s a closure?&lt;/h2&gt;

&lt;p&gt;In this post, we’ll talk about &lt;strong&gt;closures&lt;/strong&gt; (and in particular, &lt;em&gt;blocks&lt;/em&gt; and
&lt;em&gt;Proc objects&lt;/em&gt;). And as I like nothing more than a proper introduction, let’s
first define a closure.&lt;/p&gt;

&lt;p&gt;One of the “official-looking” (and pretty unhelpful) definition I have found
is the following:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A closure is a first-class function that has lexical scope.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;… 😒 (sigh)&lt;/p&gt;

&lt;p&gt;It might help to consider the following instead:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A closure is a ‘bunch of code’ that can be defined and saved for later use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Additionally, a closure ‘remembers’ its surrounding context at the time it was
initialized, ie. it &lt;em&gt;binds&lt;/em&gt; its environment (local variables, method
definitions, constants) to be sure to have everything it needs to run 
successfully.&lt;/p&gt;

&lt;p&gt;In Ruby, closures are: Proc objects, blocks and lambdas.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/closure.gif&quot;&gt;
            &lt;img src=&quot;/assets/images/closure.gif&quot; alt=&quot;Friends Serie Dialogue Closure&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;Not exactly *that* type of closure though&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Here, we’ll only talk about blocks and Procs, and more specifically, how 
to call them from methods.&lt;/p&gt;

&lt;h2 id=&quot;blocks&quot;&gt;Blocks&lt;/h2&gt;

&lt;p&gt;First, let’s talk about &lt;em&gt;blocks&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above program, &lt;code class=&quot;highlighter-rouge&quot;&gt;{ |n| n + 2 }&lt;/code&gt; is the block. A block is an ‘unnamed’
function that can be called implicitly or explicitly.&lt;/p&gt;

&lt;h3 id=&quot;implicit-block-calling&quot;&gt;Implicit Block-Calling&lt;/h3&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_method&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi from the method&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;some_method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi from the block!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# &quot;hi from the method&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above program only outputs the first string (&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hi from the method&quot;&lt;/code&gt;)
and somehow forgets about the second string (&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hi from the block!&quot;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;That’s because even though we implicitly passed the block to the method, 
we didn’t execute the block within the method. To do that, we’d need to 
&lt;em&gt;yield to the block&lt;/em&gt; by using the keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_method&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi from the method&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;some_method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi from the block!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# &quot;hi from the method&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &quot;hi from the block!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As a matter of fact, &lt;strong&gt;all Ruby methods can implicitly take a block&lt;/strong&gt;, without
needing to specify the block in its argument list or even having to execute 
the block.&lt;/p&gt;

&lt;h3 id=&quot;explicit-block-calling&quot;&gt;Explicit Block-Calling&lt;/h3&gt;

&lt;p&gt;When we write a method definition, it can be relevant to explicitly
require a block. To do that, Ruby uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; prepending the parameter’s name:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;some_method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi from the explicit block!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt; acts as a handle (a reference) for the block: within the method
definition, that block is no more an &lt;em&gt;unnamed&lt;/em&gt; function.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; prefixed to &lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt; signals that any block passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;some_method&lt;/code&gt;
upon method invocation will be converted to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;As such, we can do a bit more than simply &lt;em&gt;yield&lt;/em&gt; to it:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;some_method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi from the explicit block!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As &lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt; now refers to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; object, we can invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; on it. We can
also pass this object to another method like in our initial example:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;second_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# rest of the code omitted for brevity&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;first_method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, the block &lt;code class=&quot;highlighter-rouge&quot;&gt;{ puts &quot;hello&quot;! }&lt;/code&gt; is converted to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; thanks to the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;
prefixed in the method definition, and assigned to the local variable &lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;.
Then, a second method is invoked and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; object is passed to it as 
an argument.&lt;/p&gt;

&lt;p&gt;Notice that we dropped the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;second_method&lt;/code&gt; method invocation.&lt;/p&gt;

&lt;p&gt;To sum up: in the context of a &lt;strong&gt;method definition&lt;/strong&gt;, prepending the last 
parameter with an &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; indicates that the method takes an explicit block and that 
this block is converted to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; object (with a name) within the method body.&lt;/p&gt;

&lt;h2 id=&quot;the--within-a-method-call&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; within a method call&lt;/h2&gt;

&lt;p&gt;As a &lt;a href=&quot;/codewars-kata-launch-school-109-oral-assessment&quot;&gt;Codewar addict&lt;/a&gt;,
I’ve had my fair share of time spent on coming up with “one-liners”, aka
the shortest programs possible.&lt;/p&gt;

&lt;p&gt;One of the tricks I use is the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:upcase!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ['A', 'B', 'C']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Somehow, this code:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:upcase!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…is converted to this code:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upcase!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s the mechanism at play here (in the context of a &lt;strong&gt;method invocation&lt;/strong&gt;):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ruby checks whether the object right after the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; is a Proc:
    &lt;ul&gt;
      &lt;li&gt;If it is: great! Ruby uses the Proc object as it is&lt;/li&gt;
      &lt;li&gt;If it isn’t, Ruby calls a &lt;code class=&quot;highlighter-rouge&quot;&gt;to_proc&lt;/code&gt; method on the object, if such a method
exists for that particular class. Fortunately, a &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol#to_proc&lt;/code&gt; instance 
method does exist. In our example, the &lt;code class=&quot;highlighter-rouge&quot;&gt;:upcase&lt;/code&gt; symbol is therefore 
converted to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; object.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If the object is now a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; converts the &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; into a &lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s go back to our initial example (and recall that the &lt;code class=&quot;highlighter-rouge&quot;&gt;first_method&lt;/code&gt; 
converted the initial block to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; and passed that object to the 
&lt;code class=&quot;highlighter-rouge&quot;&gt;second_method&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;second_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;third_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;second_method&lt;/code&gt; receives a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; object, assigned to the local variable
&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;. Within the method body, a &lt;code class=&quot;highlighter-rouge&quot;&gt;third_method&lt;/code&gt; is called, with &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;block&lt;/code&gt;
passed to it as an argument.&lt;/p&gt;

&lt;p&gt;As we’re here in the context of a &lt;strong&gt;method invocation&lt;/strong&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; does the
following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Checks whether &lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt; is indeed a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; (which it is)&lt;/li&gt;
  &lt;li&gt;Converts the &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; into a block&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explaining-our-initial-example&quot;&gt;Explaining our initial example&lt;/h2&gt;

&lt;p&gt;We now have everything required to understand our initial example! Let’s 
rewrite it with more self-explanatory names:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;block_to_proc_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_to_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;proc_to_block_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_to_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proc_to_block_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_to_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;call_the_block_to_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_to_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call_the_block_to_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_to_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;block_to_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;block_to_proc_method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s explain the program step-by-step, thanks to our new understanding
of the subtleties behind the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;At first, the &lt;code class=&quot;highlighter-rouge&quot;&gt;block_to_proc_method&lt;/code&gt; is invoked, with a block 
&lt;code class=&quot;highlighter-rouge&quot;&gt;{ puts &quot;hello!&quot; }&lt;/code&gt; passed to it as an argument.&lt;/li&gt;
  &lt;li&gt;The block &lt;code class=&quot;highlighter-rouge&quot;&gt;{ puts &quot;hello!&quot; }&lt;/code&gt; is converted to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; object thanks to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; prefixed within &lt;code class=&quot;highlighter-rouge&quot;&gt;block_to_proc&lt;/code&gt;’s method definition. This &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; is 
assigned to the local variable &lt;code class=&quot;highlighter-rouge&quot;&gt;block_to_proc&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Within the first method’s body, a second method is invoked
(&lt;code class=&quot;highlighter-rouge&quot;&gt;proc_to_block_method&lt;/code&gt;), with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; passed to it as an argument.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;proc_to_block_method&lt;/code&gt; initializes the local variable &lt;code class=&quot;highlighter-rouge&quot;&gt;proc_to_block&lt;/code&gt; 
and assigns the &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; object to it.&lt;/li&gt;
  &lt;li&gt;Within the second method’s body, a third method is invoked 
(&lt;code class=&quot;highlighter-rouge&quot;&gt;call_the_block_to_proc&lt;/code&gt;), with &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;proc_to_block&lt;/code&gt; passed to it as an argument.
In the context of a method invocation, that &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; first checks whether
&lt;code class=&quot;highlighter-rouge&quot;&gt;proc_to_block&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; (it is) and then converts it to a block.&lt;/li&gt;
  &lt;li&gt;The block received by &lt;code class=&quot;highlighter-rouge&quot;&gt;call_the_block_to_proc&lt;/code&gt; is converted to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt;
object because of the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; prefixed to the parameter within the method
definition. Therefore, &lt;code class=&quot;highlighter-rouge&quot;&gt;block_to_proc&lt;/code&gt; refers to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; object within the 
third method’s body.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; is then called, which outputs &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hello!&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/spongebob.gif&quot;&gt;
            &lt;img src=&quot;/assets/images/spongebob.gif&quot; alt=&quot;Spongebob Squarepants goes Phew&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;Phew! We made it&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;tldr---its-all-about-context&quot;&gt;TL;DR - It’s all about context!&lt;/h2&gt;

&lt;p&gt;To sum up, an &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; prefixing an object can do two opposite actions, depending
on the &lt;em&gt;context&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Within a &lt;strong&gt;method definition&lt;/strong&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; converts a block (passed as an 
argument) to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;amp; within a method definition&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;some_method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi from the explicit block!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Within a &lt;strong&gt;method invocation&lt;/strong&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; first converts the object to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt;,
and then converts the &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; to a block&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:odd?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# &amp;amp; within a method invocation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Juliette Sinibardy</name></author><category term="Ruby" /><category term="Ruby Quirks" /><category term="Closures" /><category term="Learning" /><category term="Ampersand" /><category term="Block" /><category term="Proc" /><summary type="html">Quite surprisingly, the following Ruby program is correct: def first_method(&amp;amp;block) second_method(block) end def second_method(block) third_method(&amp;amp;block) end def third_method(&amp;amp;block) block.call end first_method { puts &quot;hello!&quot; } # &quot;hello!&quot; You might therefore notice that the &amp;amp; (ampersand) pops up and disappears pretty randomly in the above program. As it’s pretty hard to wrap one’s head around all this &amp;amp; madness, let’s dive into this!</summary></entry><entry><title type="html">How I Prepared for Launch School’s 109 Oral Assessment</title><link href="http://localhost:4000/preparing-launch-school-109-oral-assessment" rel="alternate" type="text/html" title="How I Prepared for Launch School's 109 Oral Assessment" /><published>2019-08-12T12:25:00+02:00</published><updated>2019-08-12T16:53:00+02:00</updated><id>http://localhost:4000/preparing-launch-school-109-oral-assessment</id><content type="html" xml:base="http://localhost:4000/preparing-launch-school-109-oral-assessment">&lt;p&gt;A couple of weeks ago, I took Launch School’s first oral exam (RB 109). 
Since I’m now somewhat stuck on the next lesson, I thought it’d be best to 
reflect on the road taken thus far.&lt;/p&gt;

&lt;p&gt;You’ll find here my time logs and general advice regarding this Launch
School exam.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I’ll include the same disclaimer as in 
&lt;a href=&quot;preparing-launch-school-109-written-assessment&quot;&gt;my previous related article&lt;/a&gt;:
the timelogs included are entirely personal, and should not impact your
own study flow.&lt;/p&gt;

&lt;h2 id=&quot;getting-through-launch-schools-101-course&quot;&gt;Getting through Launch School’s 101 course&lt;/h2&gt;

&lt;p&gt;First, let’s answer the big question, the one that tormented my days in
the Preparatory course: &lt;em&gt;How long does it take to get through course 101?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Of course the answer is: it varies. On your time commitment, on your 
previous coding experience, on how easily you can grasp the difficult concepts,
on how much repetition your memory needs, etc.&lt;/p&gt;

&lt;p&gt;Therefore, the answer provided here is nothing but the time it took
&lt;em&gt;me&lt;/em&gt; to pass this course.&lt;/p&gt;

&lt;h3 id=&quot;overall&quot;&gt;Overall&lt;/h3&gt;

&lt;p&gt;Overall, it took me &lt;strong&gt;156 hours&lt;/strong&gt; of active learning to pass Launch
School’s first course. I studied for approximately 2 months and a half (72
days), with an average of more than 2 hours per day. The daily effort
varied greatly, from 30 min to more than 5h per day - as I had other 
commitments, like my day job 😒&lt;/p&gt;

&lt;p&gt;However, I tried to study every single day (even during my week-long holiday).
I wanted programming to become one of my natural routines, and I felt that 
daily practice probably helped my memorization.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/github-commit-history.png&quot;&gt;
            &lt;img src=&quot;/assets/images/github-commit-history.png&quot; alt=&quot;My Github commit history&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;Proof: my Github commit history 💚&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;time-breakdown&quot;&gt;Time breakdown&lt;/h3&gt;

&lt;p&gt;I’ll detail here the time spent on various topics, for the entire 101-109 
course. I’ve done a similar table for the 
&lt;a href=&quot;preparing-launch-school-109-written-assessment&quot;&gt;written assessment&lt;/a&gt;, and 
felt it’d be weird to only detail the time I spent afterwards preparing the
&lt;em&gt;oral&lt;/em&gt; exam. Indeed, the time spent for the written exam 
greatly prepared me for the oral exam as well, therefore splitting the 
two didn’t really make sense to me.&lt;/p&gt;

&lt;p&gt;Without further ado, here’s my time breakdown per topic:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Topic&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Duration&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Percentage&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Lessons&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;33.5 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;21 %&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Video Lessons&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6.5 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4 %&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Walk-through / Assignments&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8 %&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ruby Small Problems&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;59.5 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;38 %&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Practice Problems&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6 %&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Code Wars&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8 %&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Live-coding&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10 %&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Exams (incl. quizzes)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7.5 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5 %&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;And per lesson:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Chapter&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Duration&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Percentage&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Lesson 1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5 %&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Lesson 2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;21 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14 %&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Lesson 3&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14.5 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9 %&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Lesson 4&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;20 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13 %&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Lesson 5&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14.5 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9 %&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Lesson 6&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6 %&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Assessment Preparation&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;68.5 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;44 %&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;key-take-aways&quot;&gt;Key Take-Aways&lt;/h2&gt;

&lt;p&gt;What to make of these tables?&lt;/p&gt;

&lt;h3 id=&quot;1--almost-50-of-my-time-was-spent-working-after-the-end-of-lesson-6&quot;&gt;1. ⌛ Almost 50% of my time was spent working &lt;em&gt;after&lt;/em&gt; the end of Lesson 6&lt;/h3&gt;

&lt;p&gt;When I prepared this article, this is the first thing that struck me:
44% of my time on 101 was spent in the Assessment preparation part, where my 
“only job” was to make sure I had indeed fully understood the material.&lt;/p&gt;

&lt;p&gt;Within this period, I’ve spent my 68 hours doing the following:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Topic&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Duration&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Percentage&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Reviewing lessons&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;23 %&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ruby Small Problems&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;22 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;32 %&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Live-coding&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;22 %&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Code Wars&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;18 %&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Exams&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.5 hours&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5 %&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Going through the lessons was not enough for me: I needed to practice for
dozens of hours afterwards before feeling ready to tackle the exams.&lt;/p&gt;

&lt;p&gt;You may have noticed that I spent a significant time live-coding, either
during TA sessions or with another fellow Launch School student 
(&lt;a href=&quot;https://www.orgamizer.com/&quot;&gt;hello Dimitri&lt;/a&gt;!)&lt;/p&gt;

&lt;p&gt;This was by far the most important part of my preparation, and I think what
was decisive for my good exam grades. I cannot recommend this enough: if
you’re currently preparing for the 109 exam, please register to a TA study
session, and practice on 1-to-1 with another student!&lt;/p&gt;

&lt;p&gt;Solving a code problem and explaining out loud your thought process are 
two difficult and &lt;em&gt;different&lt;/em&gt; skills. My first live coding attempts were
disastrous: I misread the instructions, kept getting errors on my method 
implementations, and was half-panicked.&lt;/p&gt;

&lt;p&gt;But fortunately, with a bit of practice, solving problems in front of a peer
becomes &lt;em&gt;much&lt;/em&gt; easier.&lt;/p&gt;

&lt;h3 id=&quot;2--practice-practice-practice&quot;&gt;2. 👩‍💻 Practice, practice, practice&lt;/h3&gt;

&lt;p&gt;If you do the math, I’ve actually spent 60% of my overall time practicing
code. The Ruby Small Problems, the Practice Problems, the 
&lt;a href=&quot;codewars-kata-launch-school-109-oral-assessment&quot;&gt;Code Wars katas&lt;/a&gt;
and the Assignments amounted to more than 90 hours.&lt;/p&gt;

&lt;p&gt;The reason behind this is simple: as with any skill, you need to build your
&lt;a href=&quot;https://medium.com/@talentaccurate/how-to-create-muscle-memory-in-programming-ff881fae52d0&quot;&gt;muscle memory&lt;/a&gt;.
And the secret ingredients are: 1) practice, and 2) practice.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;how-my-interview-went&quot;&gt;How my interview went&lt;/h2&gt;

&lt;p&gt;My interview was with &lt;a href=&quot;https://medium.com/@srdjancoric&quot;&gt;Srdjan&lt;/a&gt; and lasted 
for about 20 minutes; I received two exercises.&lt;/p&gt;

&lt;p&gt;During the first one, as usual, I misread the instructions, and only realised my
mistake once my code was written and half of my test cases refused to pass.
Oops. 🤦‍♀️&lt;/p&gt;

&lt;p&gt;At that point, I was fairly sure that I’d blown my interview. What (probably)
‘saved’ me was: going back to the algorithm part of 
&lt;a href=&quot;https://medium.com/launch-school/solving-coding-problems-with-pedac-29141331f93f&quot;&gt;the PEDAC process&lt;/a&gt;
and solving the &lt;em&gt;actual&lt;/em&gt; exercise there before
attempting another line of code. And this time, it worked!&lt;/p&gt;

&lt;p&gt;The second exercise went quite smoothly.&lt;/p&gt;

&lt;p&gt;During the interview, Srdjan was pretty silent, which can be intimidating. 
I received my grades less than 2 hours afterwards, and I had &lt;em&gt;actually&lt;/em&gt;
passed the exam 🎉&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you’re currently preparing the 109 Launch School exams, good luck! 🤞 
You might want to check out those two other posts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;preparing-launch-school-109-written-assessment&quot;&gt;How I Prepared for Launch School’s 109 written assessment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;codewars-kata-launch-school-109-oral-assessment&quot;&gt;My Favorite Katas to Prepare for Launch School’s 109 oral assessment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Juliette Sinibardy</name></author><category term="Launch School" /><category term="Learning" /><category term="Memory" /><category term="Ruby" /><category term="Anki" /><category term="Timelogs" /><summary type="html">A couple of weeks ago, I took Launch School’s first oral exam (RB 109). Since I’m now somewhat stuck on the next lesson, I thought it’d be best to reflect on the road taken thus far. You’ll find here my time logs and general advice regarding this Launch School exam.</summary></entry><entry><title type="html">Making Sense of Equality in Ruby</title><link href="http://localhost:4000/ruby-equality" rel="alternate" type="text/html" title="Making Sense of Equality in Ruby" /><published>2019-08-05T11:23:00+02:00</published><updated>2019-08-05T18:01:00+02:00</updated><id>http://localhost:4000/ruby-equality</id><content type="html" xml:base="http://localhost:4000/ruby-equality">&lt;p&gt;When I discovered programming, I was bamboozled by the incredible amout of 
times you type the &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; key. Among other things, I couldn’t help but 
wonder: Why on earth was I supposed to use &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; instead of the 
more ‘natural’ &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; to express equality?&lt;/p&gt;

&lt;p&gt;Turns out, it’s actually possible to make sense of this &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; madness!
Here’s a cheat sheet to gain a better understanding of equality and the 
equal sign &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; in Ruby.&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#the--madness&quot; id=&quot;markdown-toc-the--madness&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; Madness&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-about-&quot; id=&quot;markdown-toc-what-about-&quot;&gt;What about &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;?&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#general-case-the-assignment-operator&quot; id=&quot;markdown-toc-general-case-the-assignment-operator&quot;&gt;General Case: the Assignment Operator&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#-and-the-combined-assignment-operators&quot; id=&quot;markdown-toc--and-the-combined-assignment-operators&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+=&lt;/code&gt; and the combined assignment operators&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#element-assignment-&quot; id=&quot;markdown-toc-element-assignment-&quot;&gt;Element Assignment &lt;code class=&quot;highlighter-rouge&quot;&gt;#[]=&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#setter-methods-method&quot; id=&quot;markdown-toc-setter-methods-method&quot;&gt;Setter Methods &lt;code class=&quot;highlighter-rouge&quot;&gt;#method=&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the--method-and-value-equality&quot; id=&quot;markdown-toc-the--method-and-value-equality&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; method and Value Equality&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#examples-of--usage&quot; id=&quot;markdown-toc-examples-of--usage&quot;&gt;Examples of &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; usage&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the--method&quot; id=&quot;markdown-toc-the--method&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; method&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#implications-for-object-oriented-programming&quot; id=&quot;markdown-toc-implications-for-object-oriented-programming&quot;&gt;Implications for Object Oriented Programming&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-equal-method&quot; id=&quot;markdown-toc-the-equal-method&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;equal?&lt;/code&gt; method&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-about--1&quot; id=&quot;markdown-toc-what-about--1&quot;&gt;What about &lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-eql-method&quot; id=&quot;markdown-toc-the-eql-method&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;eql?&lt;/code&gt; method&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ruby-documentation&quot; id=&quot;markdown-toc-ruby-documentation&quot;&gt;Ruby Documentation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#when-should-you-use-the-eql-method&quot; id=&quot;markdown-toc-when-should-you-use-the-eql-method&quot;&gt;When should you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;eql?&lt;/code&gt; method?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#implications-for-object-oriented-programming-1&quot; id=&quot;markdown-toc-implications-for-object-oriented-programming-1&quot;&gt;Implications for Object Oriented Programming&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#key-take-aways&quot; id=&quot;markdown-toc-key-take-aways&quot;&gt;Key Take-Aways&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;the--madness&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; Madness&lt;/h2&gt;

&lt;p&gt;Here’s a short program:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 12&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above code, we have no less than &lt;em&gt;5 different forms&lt;/em&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;a = 3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+=&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;a += 10&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[]=&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;[1, 2, 3][2] = 4&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;if a == 5&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;elsif (1..10) === a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Granted, the last situation is actually quite uncommon, but this 
profusion of &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; signs is still confusing. Let’s dive in!&lt;/p&gt;

&lt;h2 id=&quot;what-about-&quot;&gt;What about &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;?&lt;/h2&gt;

&lt;h3 id=&quot;general-case-the-assignment-operator&quot;&gt;General Case: the Assignment Operator&lt;/h3&gt;

&lt;p&gt;In most cases, the &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; character refers to the &lt;strong&gt;assignment operator&lt;/strong&gt;, 
ie. the operator used to assign a new value to a variable.&lt;/p&gt;

&lt;p&gt;Therefore, &lt;code class=&quot;highlighter-rouge&quot;&gt;a = 3&lt;/code&gt; is Ruby’s way of informing the program that from
now on, the &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; variable will now reference the &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;-and-the-combined-assignment-operators&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+=&lt;/code&gt; and the combined assignment operators&lt;/h3&gt;

&lt;p&gt;Ruby comes with 6 extremely handy “combined assignment operators”,
that both operate on a variable &lt;em&gt;and&lt;/em&gt; assign the result back to the 
variable.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 12&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;They are: &lt;code class=&quot;highlighter-rouge&quot;&gt;+=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;*=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;%=&lt;/code&gt; (modulus), &lt;code class=&quot;highlighter-rouge&quot;&gt;**=&lt;/code&gt; (exponent).&lt;/p&gt;

&lt;p&gt;As with regular assignment, these operators have nothing to do with
testing for equality.&lt;/p&gt;

&lt;h3 id=&quot;element-assignment-&quot;&gt;Element Assignment &lt;code class=&quot;highlighter-rouge&quot;&gt;#[]=&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Another common Ruby construct is &lt;strong&gt;element assignment&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;hello&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Y&quot;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;Y&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;Yello&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Element assignment is actually a method (&lt;code class=&quot;highlighter-rouge&quot;&gt;#[]=&lt;/code&gt;), available to Strings,
Arrays and Hashes. It replaces the element referenced
by its index. Again, it doesn’t check for equality.&lt;/p&gt;

&lt;h3 id=&quot;setter-methods-method&quot;&gt;Setter Methods &lt;code class=&quot;highlighter-rouge&quot;&gt;#method=&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Finally, you’ll encounter methods with a final &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;, which (spoiler
alert) have nothing to do with equality. These methods are &lt;strong&gt;setter
methods&lt;/strong&gt;: they’re used to set a value to an instance variable.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# setter method&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;kitty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kitty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pixel&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kitty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;Pixel&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;To sum up, &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; on its own is &lt;em&gt;never&lt;/em&gt; used to check whether 
two elements are equal.&lt;/p&gt;

&lt;p&gt;Instead, the &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; method will 99% of the times do the job 🌈&lt;/p&gt;

&lt;h2 id=&quot;the--method-and-value-equality&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; method and Value Equality&lt;/h2&gt;

&lt;h3 id=&quot;examples-of--usage&quot;&gt;Examples of &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; usage&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; usually checks whether the two objects on either side have
the same &lt;em&gt;value&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From these examples, we can deduce the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;2 identical integers have equal value (which sounds pretty obvious)&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; of value &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hello&quot;&lt;/code&gt; referenced by a variable has the 
same value than another &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; of value &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hello&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Two &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; objects of different values (&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hello&quot;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;world&quot;&lt;/code&gt;)
are unequal&lt;/li&gt;
  &lt;li&gt;Two &lt;code class=&quot;highlighter-rouge&quot;&gt;Hashes&lt;/code&gt; are equal if their key-value pairs are identical (even
if the order is different)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Arrays&lt;/code&gt; must also have an identical order to be considered equal&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the--method&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; method&lt;/h3&gt;

&lt;p&gt;How does Ruby know how to compare two Hashes? Two Arrays? Two
custom objects? The answer lies in the fact that &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; is not 
an operator but an &lt;strong&gt;instance method&lt;/strong&gt;. You could actually write 
&lt;code class=&quot;highlighter-rouge&quot;&gt;2.==(2)&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;2 == 2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;BasicObject&lt;/code&gt; instance method (ie. the class
that contains every other object in Ruby), which means it’s available
to &lt;em&gt;any&lt;/em&gt; object.&lt;/p&gt;

&lt;p&gt;However, we almost never use the default &lt;code class=&quot;highlighter-rouge&quot;&gt;BasicObject#==&lt;/code&gt; method. 
Instead, each subclass is supposed to &lt;strong&gt;override&lt;/strong&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; method with a 
custom definition that suits its own needs.&lt;/p&gt;

&lt;p&gt;For instance, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash#==&lt;/code&gt; method does not account for key-value pairs order. 
Here’s the corresponding entry in the 
&lt;a href=&quot;https://docs.ruby-lang.org/en/2.6.0/Hash.html#method-i-3D-3D&quot;&gt;Ruby documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;hsh == other_hash → true or false&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Equality—Two hashes are equal if they each contain the same number of keys 
and if each key-value pair is equal to (according to &lt;code class=&quot;highlighter-rouge&quot;&gt;Object#==&lt;/code&gt;) 
the corresponding elements in the other hash.
&lt;em&gt;The orders of each hashes are not compared.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;implications-for-object-oriented-programming&quot;&gt;Implications for Object Oriented Programming&lt;/h3&gt;

&lt;p&gt;Therefore, if you create a custom class and want to compare for “value equality”
between two instances, you’ll need to implement your own custom &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; instance
method.&lt;/p&gt;

&lt;p&gt;Otherwise, &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; will still work, but probably not how you intended it:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;kitty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;teacup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kitten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;teacup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kitty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kitten&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Those two &lt;code class=&quot;highlighter-rouge&quot;&gt;Cat&lt;/code&gt; objects have exactly the same value but &lt;code class=&quot;highlighter-rouge&quot;&gt;kitty == kitten&lt;/code&gt;
returns &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; - why?&lt;/p&gt;

&lt;p&gt;The answer is that Ruby applied the &lt;code class=&quot;highlighter-rouge&quot;&gt;BasicObject#==&lt;/code&gt; method, which has the 
same implementation than &lt;code class=&quot;highlighter-rouge&quot;&gt;BasicObject#equal?&lt;/code&gt; (see next section), and
basically checks whether two &lt;em&gt;objects&lt;/em&gt; are equal (not whether they
have the same value).&lt;/p&gt;

&lt;p&gt;Indeed, how could Ruby know when 2 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cat&lt;/code&gt; objects are equal? It doesn’t 
know how to compare these two custom objects. We need to explicitly tell 
Ruby how to compare them, by including an instance method &lt;code class=&quot;highlighter-rouge&quot;&gt;Cat#==&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other_cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;kitty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;teacup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kitten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;teacup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kitty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kitten&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we chose to consider two cats identical if they have the same &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;
value. It’s completely up to us: we could also have chosen their &lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt; or 
&lt;code class=&quot;highlighter-rouge&quot;&gt;color&lt;/code&gt;. And it works! &lt;code class=&quot;highlighter-rouge&quot;&gt;kitty == kitten&lt;/code&gt; now returns &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; 🍾&lt;/p&gt;

&lt;h2 id=&quot;the-equal-method&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;equal?&lt;/code&gt; method&lt;/h2&gt;

&lt;p&gt;If we want to know whether two objects are actually &lt;em&gt;the same object&lt;/em&gt;, we can
use the &lt;code class=&quot;highlighter-rouge&quot;&gt;object_id&lt;/code&gt; method and compare their IDs:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 3 &lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 3 &lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, both &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; share the same ID &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;, which means they are both 
pointing to the same object.&lt;/p&gt;

&lt;p&gt;However, there’s an easier way to compare for object equality, using the 
&lt;code class=&quot;highlighter-rouge&quot;&gt;BasicObject#equal?&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;equal?&lt;/code&gt; goes deeper than &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;: it checks whether two objects have the same
value &lt;em&gt;and&lt;/em&gt; whether the two variables point to the same object.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi there&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi there&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;str3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str3&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;str2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;str3&lt;/code&gt; all have the same value &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hi there&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, only &lt;code class=&quot;highlighter-rouge&quot;&gt;str1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;str3&lt;/code&gt; point to the same object (as expected, given 
that &lt;code class=&quot;highlighter-rouge&quot;&gt;str3&lt;/code&gt; is a copy of &lt;code class=&quot;highlighter-rouge&quot;&gt;str1&lt;/code&gt;). Therefore, &lt;code class=&quot;highlighter-rouge&quot;&gt;str1.equal? str3&lt;/code&gt; returns &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, 
while &lt;code class=&quot;highlighter-rouge&quot;&gt;str1.equal? str2&lt;/code&gt; returns &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;str1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;str2&lt;/code&gt; are different 
objects which happen to have the same value &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hi there&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s pretty rare to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;equal?&lt;/code&gt; method, but it’s still useful to 
understand its behavior, especially when implementing custom classes.&lt;/p&gt;

&lt;h2 id=&quot;what-about--1&quot;&gt;What about &lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;If we know how to check for value equality (&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;) &lt;em&gt;and&lt;/em&gt; for object equality
(&lt;code class=&quot;highlighter-rouge&quot;&gt;equal?&lt;/code&gt;), what is &lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt; good for? It’s actually used to check for
&lt;strong&gt;range inclusion&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt; method compares two objects by checking whether the first element 
(the &lt;em&gt;group&lt;/em&gt;) includes the second element. It’s rarely used explicitly.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# true: 3 is included in the range from 1 to 10&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# true: 'c' is included in the range from a to d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt; is much more often used implicitly though, as this is the method used 
“under the hood” by &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; statements:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'d'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;yay&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;yay&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above case statement is equivalent to the following code:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yay&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;yay&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-eql-method&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;eql?&lt;/code&gt; method&lt;/h2&gt;

&lt;p&gt;Here’s a last method to consider when thinking about equality. This one is 
pretty obscure, and there’s a good chance you’ll never even have to use it,
but I’m aiming for exhaustivity here 👩‍🏫&lt;/p&gt;

&lt;h3 id=&quot;ruby-documentation&quot;&gt;Ruby Documentation&lt;/h3&gt;

&lt;p&gt;According to the 
&lt;a href=&quot;https://docs.ruby-lang.org/en/2.6.0/Object.html#method-i-eql-3F&quot;&gt;Ruby documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;eql?(other) → true or false&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;eql?&lt;/code&gt; method returns &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;other&lt;/code&gt; refer to the same hash
key. This is used by &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; to test members for equality. For objects of class 
&lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;eql?&lt;/code&gt; is synonymous with &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;. Subclasses normally continue 
this tradition by aliasing &lt;code class=&quot;highlighter-rouge&quot;&gt;eql?&lt;/code&gt; to their overridden &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; method, but
there are exceptions. &lt;code class=&quot;highlighter-rouge&quot;&gt;Numeric&lt;/code&gt; types, for example, perform type conversion
across &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;, but not across &lt;code class=&quot;highlighter-rouge&quot;&gt;eql?&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore, two &lt;code class=&quot;highlighter-rouge&quot;&gt;Numeric&lt;/code&gt; objects could be equal (with &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;), but different with
&lt;code class=&quot;highlighter-rouge&quot;&gt;eql?&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eql?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eql?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But most of the time, two objects that are equal through &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; should return 
&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; when &lt;code class=&quot;highlighter-rouge&quot;&gt;eql?&lt;/code&gt; is called.&lt;/p&gt;

&lt;h3 id=&quot;when-should-you-use-the-eql-method&quot;&gt;When should you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;eql?&lt;/code&gt; method?&lt;/h3&gt;

&lt;p&gt;The answer is: probably never. However,
it’s routinely used by &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; objects to check for hash key equality. As you 
know, hash keys must be unique, and this is enforced through &lt;code class=&quot;highlighter-rouge&quot;&gt;eql?&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To check for this uniqueness, &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; objects use the &lt;code class=&quot;highlighter-rouge&quot;&gt;eql?&lt;/code&gt; method to 
convert the keys through the &lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt; method. This method returns a hash code for 
each key.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Two different String objects with a value of &quot;a&quot; have the same hash:&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hash&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; -3382060362238486793&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hash&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; -3382060362238486793&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the two &lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt; return values are equal (like for &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;a&quot;&lt;/code&gt;), then only one
element can serve as a &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; key.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# warning: key &quot;a&quot; is duplicated and overwritten&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {&quot;a&quot;=&amp;gt;2} &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, it’s interesting to note that both &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;a&quot;&lt;/code&gt; elements share the same
&lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt;, but not the same &lt;code class=&quot;highlighter-rouge&quot;&gt;object_id&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Different object IDs&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 33313480&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 33412160&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eql?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Therefore, &lt;code class=&quot;highlighter-rouge&quot;&gt;eql?&lt;/code&gt; returns &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; (as it compares the two &lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt;) and &lt;code class=&quot;highlighter-rouge&quot;&gt;equal?&lt;/code&gt;
returns &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; (because their &lt;code class=&quot;highlighter-rouge&quot;&gt;object_id&lt;/code&gt; are different).&lt;/p&gt;

&lt;h3 id=&quot;implications-for-object-oriented-programming-1&quot;&gt;Implications for Object Oriented Programming&lt;/h3&gt;

&lt;p&gt;If you happen to override &lt;code class=&quot;highlighter-rouge&quot;&gt;eql?&lt;/code&gt; in a custom class, you’ll also need to 
override the &lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt; method. If you don’t, instances of this class won’t 
work as keys in a &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Indeed, objects used as keys &lt;em&gt;must&lt;/em&gt; have a method named &lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt; that returns
a numeric hashcode for the key.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;key-take-aways&quot;&gt;Key Take-Aways&lt;/h2&gt;

&lt;p&gt;To sum-up:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; on its own is &lt;em&gt;not&lt;/em&gt; about equality: it’s an &lt;strong&gt;assignment operator&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; checks whether two objects have the same &lt;strong&gt;value&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; method should be &lt;strong&gt;overriden&lt;/strong&gt; when creating a custom class, in order
to tell Ruby how to compare two custom objects.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;equal?&lt;/code&gt; method checks whether two variables point to the &lt;strong&gt;same object&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt; checks for &lt;strong&gt;range inclusion&lt;/strong&gt;, and is mostly used by &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; 
statements.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;eql?&lt;/code&gt; method is almost exclusively used by &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; objects to check the
uniqueness of their hash keys.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Juliette Sinibardy</name></author><category term="Ruby" /><category term="Learning" /><category term="Equality" /><category term="Ruby Quirks" /><category term="Object Oriented Programming" /><summary type="html">When I discovered programming, I was bamboozled by the incredible amout of times you type the = key. Among other things, I couldn’t help but wonder: Why on earth was I supposed to use == instead of the more ‘natural’ = to express equality? Turns out, it’s actually possible to make sense of this = madness! Here’s a cheat sheet to gain a better understanding of equality and the equal sign = in Ruby.</summary></entry><entry><title type="html">My Favourite Codewars Kata to Prepare for Launch School’s 109 Oral Assessment</title><link href="http://localhost:4000/codewars-kata-launch-school-109-oral-assessment" rel="alternate" type="text/html" title="My Favourite Codewars Kata to Prepare for Launch School's 109 Oral Assessment" /><published>2019-07-29T21:11:00+02:00</published><updated>2019-08-12T16:56:00+02:00</updated><id>http://localhost:4000/codewars-kata-launch-school-109-oral-assessment</id><content type="html" xml:base="http://localhost:4000/codewars-kata-launch-school-109-oral-assessment">&lt;p&gt;I’ve recently passed with success my first Launch School oral assessment (the 
dreaded 109 oral exam) 🍾&lt;/p&gt;

&lt;p&gt;It was a hell of a ride, and I’d like to share my secret recipe: training with
&lt;a href=&quot;https://codewars.com&quot;&gt;Codewars&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;launch-schools-ruby-small-problems&quot;&gt;Launch School’s Ruby Small Problems&lt;/h2&gt;

&lt;p&gt;I’ll start by stating the obvious: you should first and foremost do the 
Ruby Small Problems provided by Launch School. Once you’re done, you
should also re-do them at least once. They’re literally made to prepare you
for the 109 exam so you should put in a lot of efforts on them.&lt;/p&gt;

&lt;p&gt;However as I’m blessed with an excellent memory, re-doing the same 
exercises wasn’t much of a challenge as I mostly (sometimes vaguely)
remembered the pattern I was supposed to follow. I sometimes ended up with
the exact same solution I had found on my first pass.&lt;/p&gt;

&lt;p&gt;Sure, easily redoing the exercises somewhat boosted my confidence, but I felt
unsure on whether I was actually getting better at coding or if I was doing it
all from memory.&lt;/p&gt;

&lt;p&gt;I needed fresh exercises! And this is how I started doing exercises on 
Codewars.&lt;/p&gt;

&lt;h2 id=&quot;whats-codewars&quot;&gt;What’s Codewars?&lt;/h2&gt;

&lt;p&gt;Codewars is a community-based website where you can train on exercises and
gain points (&lt;em&gt;honor&lt;/em&gt;) solving them. (You can also submit new exercises
or translate the problem on another programming language.)&lt;/p&gt;

&lt;p&gt;What I liked most is the fact that once you submit your answer, you gain access
to the solutions provided by others. As the best ones get upvoted, you can 
therefore discover a much clever way to solve the “Kata”. This is how 
I’ve discovered new methods, like &lt;code class=&quot;highlighter-rouge&quot;&gt;String#scan&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerator#with_index&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/codewars.png&quot;&gt;
            &lt;img src=&quot;/assets/images/codewars.png&quot; alt=&quot;Codewars solution to a kata&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;You can now compare your 10 line method to the glorious one-liners&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;my-favourite-katas&quot;&gt;My favourite Katas&lt;/h2&gt;

&lt;p&gt;I’ve listed here my favourite Katas that could help you prepare the 109
assessment. I’ve tried to avoid the Katas where advanced Math knowledge
is necessary, and aimed at selecting problems that looked like the ones given
by Launch School. The Katas are ordered by complexity (&lt;em&gt;8 kyu&lt;/em&gt; is the easiest).&lt;/p&gt;

&lt;p&gt;My personal challenge before the assessment was being able to solve the 6 kyu 
katas in less than 20 minutes. Bear in mind that the problem given during 
the oral exam will be more or less of the level of 6 kyu katas, &lt;em&gt;and&lt;/em&gt; you’ll be
much more stressed out and prone to mistakes.&lt;/p&gt;

&lt;h3 id=&quot;7-or-8-kyu&quot;&gt;7 or 8 kyu&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;[8 kyu] &lt;a href=&quot;https://www.codewars.com/kata/59342039eb450e39970000a6&quot;&gt;Count Odd numbers below n&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[7 kyu] &lt;a href=&quot;https://www.codewars.com/kata/58aa68605aab54a26c0001a6&quot;&gt;Distinct Digit Year&lt;/a&gt; ⭐&lt;/li&gt;
  &lt;li&gt;[7 kyu] &lt;a href=&quot;https://www.codewars.com/kata/5a523566b3bfa84c2e00010b&quot;&gt;Minimize Sum of Arrays&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[7 kyu] &lt;a href=&quot;https://www.codewars.com/kata/5a4ea304b3bfa89a9900008e&quot;&gt;Form the Largest&lt;/a&gt; ⭐&lt;/li&gt;
  &lt;li&gt;[7 kyu] &lt;a href=&quot;https://www.codewars.com/kata/544aed4c4a30184e960010f4&quot;&gt;Find the Divisors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[7 kyu] &lt;a href=&quot;https://www.codewars.com/kata/56269eb78ad2e4ced1000013&quot;&gt;Find the Next Perfect Square&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-or-6-kyu&quot;&gt;5 or 6 kyu&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;[6 kyu] &lt;a href=&quot;https://www.codewars.com/kata/514b92a657cdc65150000006&quot;&gt;Multiples of 3 or 5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[6 kyu] &lt;a href=&quot;https://www.codewars.com/kata/5894318275f2c75695000146&quot;&gt;Delete a Digit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[6 kyu] &lt;a href=&quot;https://www.codewars.com/kata/5970df092ef474680a0000c9&quot;&gt;Alphabetized&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[6 kyu] &lt;a href=&quot;https://www.codewars.com/kata/5ae326342f8cbc72220000d2&quot;&gt;Simple Simple Simple String Expansion&lt;/a&gt; ⭐&lt;/li&gt;
  &lt;li&gt;[6 kyu] &lt;a href=&quot;https://www.codewars.com/kata/58f5c63f1e26ecda7e000029&quot;&gt;Mexican Wave&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[6 kyu] &lt;a href=&quot;https://www.codewars.com/kata/53bb1201392478fefc000746&quot;&gt;Sherlock on pockets&lt;/a&gt; (good to practice hashes)&lt;/li&gt;
  &lt;li&gt;[6 kyu] &lt;a href=&quot;https://www.codewars.com/kata/546f922b54af40e1e90001da&quot;&gt;Replace with Alphabet Position&lt;/a&gt; ⭐&lt;/li&gt;
  &lt;li&gt;[5 kyu] &lt;a href=&quot;https://www.codewars.com/kata/520b9d2ad5c005041100000f&quot;&gt;Simple Pig Latin&lt;/a&gt; ⭐&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve marked of a star (⭐)   the Katas  that  I   enjoyed the most.&lt;/p&gt;

&lt;p&gt;And for the perfectionists out there, stop fretting because your solution to the
kata is not as elegant as the top-voted solutions. It’s OK, we’ll get there!
(I can spot you from afar, I’m the same 😉)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you’re interested in preparing Launch School’s exams, you might want
to check out these other posts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/preparing-launch-school-109-written-assessment&quot;&gt;How I Prepared for Launch School’s 109 written assessment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;preparing-launch-school-109-oral-assessment&quot;&gt;How I Prepared for Launch School’s 109 oral assessment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Juliette Sinibardy</name></author><category term="Launch School" /><category term="Learning" /><category term="Ruby" /><category term="Codewars" /><category term="Programming Exercises" /><summary type="html">I’ve recently passed with success my first Launch School oral assessment (the dreaded 109 oral exam) 🍾 It was a hell of a ride, and I’d like to share my secret recipe: training with Codewars.</summary></entry><entry><title type="html">How I Prepared for Launch School’s 109 Written Assessment</title><link href="http://localhost:4000/preparing-launch-school-109-written-assessment" rel="alternate" type="text/html" title="How I Prepared for Launch School's 109 Written Assessment" /><published>2019-07-17T12:14:00+02:00</published><updated>2019-08-12T16:57:00+02:00</updated><id>http://localhost:4000/preparing-launch-school-109-written-assessment</id><content type="html" xml:base="http://localhost:4000/preparing-launch-school-109-written-assessment">&lt;p&gt;I recently took Launch School’s first written exam (RB 109), that comes at the
end of the first course, RB 101, Programming Foundations.&lt;/p&gt;

&lt;p&gt;This course is especially challenging because it forces us to simultaneously:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;learn to learn again,&lt;/li&gt;
  &lt;li&gt;learn Ruby syntax,&lt;/li&gt;
  &lt;li&gt;learn problem solving.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I thought it would be a good time to reflect on my study methods and the time
it took me to get there.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: The time it takes to get through the course is entirely
personal. I may have been at ease on some topics, and completely stuck
on other parts. The time logs are simply indicative and should not impact
your own study flow.&lt;/p&gt;

&lt;h2 id=&quot;going-through-the-101-courses&quot;&gt;Going through the 101 courses&lt;/h2&gt;

&lt;p&gt;During the lessons, I always took notes in &lt;strong&gt;Markdown&lt;/strong&gt; (this will come in handy
later), using &lt;a href=&quot;https://typora.io/&quot;&gt;Typora&lt;/a&gt;. My notes were pretty detailed
(sometimes even bordering on copying word after word the lesson). I guess 
this meticulous copying helps my memorization, even though I haven’t re-read
my notes for the most part.&lt;/p&gt;

&lt;p&gt;I spent a significative time going through the lessons (&lt;strong&gt;37.5 hours&lt;/strong&gt;), and
was striving to understand every line of the lesson.&lt;/p&gt;

&lt;h2 id=&quot;the-ruby-small-problems&quot;&gt;The Ruby Small Problems&lt;/h2&gt;

&lt;p&gt;To take a break in between lessons, I was also advancing on the &lt;strong&gt;Ruby Small 
Problems&lt;/strong&gt;. My goal was to always find a working solution myself, and if I
didn’t, I added this problem in my “to be done again” list.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/to-do-list.png&quot;&gt;
            &lt;img src=&quot;/assets/images/to-do-list.png&quot; alt=&quot;My exercises to do list&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;Pro tip: you can create a checkbox in markdown with `[ ]`&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I would then briefly read the solution (trying not to spend more than a 
couple of seconds on it), then hide the solution and try to come up with 
the exact same program without peeking too much.&lt;/p&gt;

&lt;p&gt;If the solution introduced a new method, I would look it up on the 
documentation and sometimes incorpore it in my Anki memory cards (more on that
below).&lt;/p&gt;

&lt;p&gt;If I could, I would also work on the Further Exploration. But most of the time,
the Further Exploration joined the “to be done again” list.&lt;/p&gt;

&lt;p&gt;When I was nearing the end of the 101 course, I started re-doing the “to be 
done again” exercises, and even though some remained difficult, most of them
felt much easier. This was probably the biggest sign that I was actually
making a progress (and it felt good!)&lt;/p&gt;

&lt;p&gt;Most of my time on 101 was spent on the Ruby Small Problems, which took me
more than &lt;strong&gt;60 hours&lt;/strong&gt;. (And I haven’t quite finished a couple of
Advanced Problems.)&lt;/p&gt;

&lt;h2 id=&quot;creating-flash-cards-on-anki&quot;&gt;Creating Flash cards on Anki&lt;/h2&gt;

&lt;p&gt;Everytime I would encounter an information that seemed important enough, 
I would create an Anki flash card.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; on desktop, I prefer using &lt;a href=&quot;https://ankiweb.net&quot;&gt;Anki’s web interface&lt;/a&gt; 
rather than their pretty dated software interface.&lt;/p&gt;

&lt;p&gt;What’s my gradiant for “important enough”?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;An information that contains some general knowledge about computer science
(eg. regular expressions, command line interface…)&lt;/li&gt;
  &lt;li&gt;An information about Ruby’s behavior (eg. pass by value / reference, 
variable scope, truthiness)&lt;/li&gt;
  &lt;li&gt;A method that seemed particularly useful (eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;Array#|&lt;/code&gt; to merge two arrays
while only keeping the unique values)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example of questions and answers:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How can I add an element to the beginning of the array?&lt;/p&gt;

  &lt;p&gt;By using &lt;code class=&quot;highlighter-rouge&quot;&gt;Array#unshift&lt;/code&gt; (destructive)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;How can I check that a collection has at least one element that satisfies an 
expression?&lt;/p&gt;

  &lt;p&gt;By using &lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable#any?&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;What does the last expression return?&lt;/p&gt;
  &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bear'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;c: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cat'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cab'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;b&quot;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I would use my commute time to go through my Anki deck (on the mobile app),
sometimes editing old questions when the formulation was too vague or implied
that I didn’t quite grasp a concept at that time.&lt;/p&gt;

&lt;h2 id=&quot;the-study-sessions&quot;&gt;The Study Sessions&lt;/h2&gt;

&lt;p&gt;At the end of the 101 course, I started to attend as many study sessions as 
I could. Before that, I was pretty embarrassed to showcase my lack of 
mastery, and prefered avoiding them.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/buzz.gif&quot;&gt;
            &lt;img src=&quot;/assets/images/buzz.gif&quot; alt=&quot;Buzz Lightyear gif&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;How I thought TAs would react when I'd open my mouth&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;However, I can now see how mistaken I was. The Teacher Assistants are nothing
but kind and encouraging. Attending study sessions both helped me 
try new solving methods and gain in confidence. These sessions are 
absolutely essential for the oral assessment, but I believe they helped me
for the written assessment as well.&lt;/p&gt;

&lt;h2 id=&quot;the-study-guide&quot;&gt;The Study Guide&lt;/h2&gt;

&lt;p&gt;Launch School provides a Study guide that details what will be covered in the
written assessment. And this is actually 100% true: what is listed &lt;em&gt;will&lt;/em&gt;
be useful during the exam.&lt;/p&gt;

&lt;p&gt;I personally spent quite some time on the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Variables as pointers&lt;/li&gt;
  &lt;li&gt;Mutative methods&lt;/li&gt;
  &lt;li&gt;Pass by reference &amp;amp; Pass by value&lt;/li&gt;
  &lt;li&gt;Truthiness&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whenever a concept came up, I tried to create my own example on Ruby and saved
it for the exam. Complete mastery of the concept is not enough: you need to be 
able to answer fast, and having pre-made bits of answers can go a long way.&lt;/p&gt;

&lt;p&gt;Keep in mind that you’ll have more than 20 questions (I had 23) and only
3 hours: if you take into account the necessary time to read the questions and
proofread your answers, you’ll have less than 10 minutes per question.&lt;/p&gt;

&lt;p&gt;To assess whether I was ready to take the exam, I’ve worked on 
&lt;a href=&quot;https://medium.com/how-i-started-learning-coding-from-scratch/advice-for-109-written-assessment-part-3-d39dceb06c0c&quot;&gt;Srdjan&lt;/a&gt;’s
programs while trying to spend less than 5 minutes to precisely describe 
what was happening under the hood.&lt;/p&gt;

&lt;p&gt;I ended up creating a handful of pre-made sentences that were useful all the
time, like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We’ve initialized the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;var_name&lt;/code&gt; and assigned to it the 
Integer/String/etc object &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; to it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This little trick saved me a couple of critical minutes during the exam.&lt;/p&gt;

&lt;h2 id=&quot;my-timelogs&quot;&gt;My Timelogs&lt;/h2&gt;

&lt;p&gt;I’ve used &lt;a href=&quot;https://www.toggl.com/&quot;&gt;Toggl&lt;/a&gt; to keep track of how long I spent
on each topic, and also to make sure that I reached my 15-hours per week
objective.&lt;/p&gt;

&lt;p&gt;Here’s the total breakdown of my &lt;strong&gt;127 hours&lt;/strong&gt; spent on the 101 course:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Topic&lt;/th&gt;
      &lt;th&gt;Duration&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Lessons&lt;/td&gt;
      &lt;td&gt;33.5 hours&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Video Lessons&lt;/td&gt;
      &lt;td&gt;4 hours&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Walk-through / Assignments&lt;/td&gt;
      &lt;td&gt;12 hours&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ruby Small Problems&lt;/td&gt;
      &lt;td&gt;52 hours&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Practice Problems&lt;/td&gt;
      &lt;td&gt;10 hours&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Live-coding&lt;/td&gt;
      &lt;td&gt;8 hours&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Exams (incl. quizzes)&lt;/td&gt;
      &lt;td&gt;7.5 hours&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/toggl.png&quot;&gt;
            &lt;img src=&quot;/assets/images/toggl.png&quot; alt=&quot;My weekly toggle timelogs&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;The weekly breakdown&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Now, time to practice for the interview assessment!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you’re currently preparing the 109 Launch School exams, congratulations! 🎉 
Additionally, you might find these other posts useful:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;preparing-launch-school-109-oral-assessment&quot;&gt;How I Prepared for Launch School’s 109 oral assessment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;codewars-kata-launch-school-109-oral-assessment&quot;&gt;My Favorite Katas to Prepare for Launch School’s 109 oral assessment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Juliette Sinibardy</name></author><category term="Launch School" /><category term="Learning" /><category term="Memory" /><category term="Ruby" /><category term="Anki" /><category term="Timelogs" /><summary type="html">I recently took Launch School’s first written exam (RB 109), that comes at the end of the first course, RB 101, Programming Foundations. This course is especially challenging because it forces us to simultaneously: learn to learn again, learn Ruby syntax, learn problem solving. I thought it would be a good time to reflect on my study methods and the time it took me to get there.</summary></entry><entry><title type="html">A Beginner’s Guide to SEO optimization in a Jekyll static website</title><link href="http://localhost:4000/optimize-seo-jekyll" rel="alternate" type="text/html" title="A Beginner's Guide to SEO optimization in a Jekyll static website" /><published>2019-07-09T09:16:00+02:00</published><updated>2019-07-09T23:06:00+02:00</updated><id>http://localhost:4000/optimize-jekyll-seo</id><content type="html" xml:base="http://localhost:4000/optimize-seo-jekyll">&lt;blockquote&gt;
  &lt;p&gt;What? There’s no sitemap here?
&lt;em&gt;- Me when I discovered my new Jekyll blog&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although Jekyll comes a little “naked” in terms of necessary SEO tools
(especially in comparison to traditional CMS), it’s pretty easy to remedy this
situation. Here are a couple of easy steps to follow, in order to improve your
SEO ranking and 
&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot;&gt;your Lighthouse score&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#install-jekyll-seo-tag&quot; id=&quot;markdown-toc-install-jekyll-seo-tag&quot;&gt;Install jekyll-seo-tag&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#install-jekyll-sitemap-and-optimize-date-management&quot; id=&quot;markdown-toc-install-jekyll-sitemap-and-optimize-date-management&quot;&gt;Install jekyll-sitemap and optimize date management&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#add-a-google-analytics-tracking-id&quot; id=&quot;markdown-toc-add-a-google-analytics-tracking-id&quot;&gt;Add a Google Analytics tracking ID&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#performance-optimizations&quot; id=&quot;markdown-toc-performance-optimizations&quot;&gt;Performance optimizations&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#google-analytics-tracking&quot; id=&quot;markdown-toc-google-analytics-tracking&quot;&gt;Google Analytics tracking&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#reduce-image-size&quot; id=&quot;markdown-toc-reduce-image-size&quot;&gt;Reduce image size&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#replace-github-gist-by-code-snippets&quot; id=&quot;markdown-toc-replace-github-gist-by-code-snippets&quot;&gt;Replace Github gist by code snippets&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#remove-useless-fonts&quot; id=&quot;markdown-toc-remove-useless-fonts&quot;&gt;Remove useless fonts&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#accessibility&quot; id=&quot;markdown-toc-accessibility&quot;&gt;Accessibility&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#seo-101&quot; id=&quot;markdown-toc-seo-101&quot;&gt;SEO 101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;install-jekyll-seo-tag&quot;&gt;Install jekyll-seo-tag&lt;/h2&gt;

&lt;p&gt;The first thing you want to do is install the 
&lt;a href=&quot;https://github.com/jekyll/jekyll-seo-tag&quot;&gt;jekyll-seo-tag plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This plugin will automatically generate the following meta tags:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Page title and description&lt;/li&gt;
  &lt;li&gt;Canonical URL&lt;/li&gt;
  &lt;li&gt;Open Graph title, description (useful for Facebook or Linkedin)&lt;/li&gt;
  &lt;li&gt;Twitter Summary Card metadata&lt;/li&gt;
  &lt;li&gt;and other stuff&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the plugin is added to your &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file, you’ll need to add a simple
line to the &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; of every page. To do that, I created a 
&lt;code class=&quot;highlighter-rouge&quot;&gt;custom-head.html&lt;/code&gt; file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt; folder and added the following 
SEO tag:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/17b76ed8bf8dc7d892dd2e19ca9a59d4.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now, all you have to do is to update your title, metadescriptions and permalink
on every article or page ✨&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;How&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Up&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Contact&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Jekyll&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;setup-contact-form-jekyll&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Here's a detailed tutorial on how to set up a&lt;/span&gt; 
             &lt;span class=&quot;s&quot;&gt;free contact form on static websites like Jekyll&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;install-jekyll-sitemap-and-optimize-date-management&quot;&gt;Install jekyll-sitemap and optimize date management&lt;/h2&gt;

&lt;p&gt;The next thing you’ll need is have a good sitemap, to help web crawlers
do their job.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/happy-index-robot.jpg&quot;&gt;
            &lt;img src=&quot;/assets/images/happy-index-robot.jpg&quot; alt=&quot;Busy robot from Wall-E&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;🤖 Must... index... everything... 🤖&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Fortunately, there’s a plugin for that: 
&lt;a href=&quot;https://github.com/jekyll/jekyll-sitemap&quot;&gt;jekyll-sitemap&lt;/a&gt;! And its use is
pretty straightforward.&lt;/p&gt;

&lt;p&gt;The only subtlety is the date and time management. The sitemap plugin will
automatically use your &lt;strong&gt;Created date&lt;/strong&gt; to fill the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;lastmod&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;However, you probably want to have your &lt;strong&gt;Last modified date&lt;/strong&gt; instead. 
To do that, you could use
&lt;a href=&quot;https://github.com/gjtorikian/jekyll-last-modified-at&quot;&gt;the jekyll-last-modified-at plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However the plugin isn’t compatible with Github Pages, because of Github’s 
automatic builds. Instead, you can add add the parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;last_modified_at&lt;/code&gt;
inside your front matter directly, and the sitemap will automatically use
this date as the Last modified date.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;               &lt;span class=&quot;s&quot;&gt;2019-07-03 10:28:08 +0200&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;last_modified_at&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;2019-07-07 11:55:00 +0200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To simplify your use of timestamps, I recommend using the 
&lt;a href=&quot;https://github.com/jekyll/jekyll-compose&quot;&gt;jekyll-compose plugin&lt;/a&gt;. It will
automatically create your posts with the perfect timestamp and your custom
front matter.&lt;/p&gt;

&lt;p&gt;All you need to do is correctly set up your &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file and then
type &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll post &quot;My post name&quot;&lt;/code&gt; in your CLI.&lt;/p&gt;

&lt;p&gt;Here are my own custom front matter settings:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;jekyll_compose&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;post_default_front_matter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;last_modified_at&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;published&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sitemap&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;excerpt_separator&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;!--more--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Additionally, you should specify your UTC timezone in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file,
using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Tz_database&quot;&gt;IANA TimeZone Database&lt;/a&gt;
naming convention.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Europe/Paris&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will allow your timestamps to use your correct timezone:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Before setting the timezone&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;2019-07-03 08:28:08 +0000&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# After setting the timezone&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;2019-07-03 10:28:08 +0200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;add-a-google-analytics-tracking-id&quot;&gt;Add a Google Analytics tracking ID&lt;/h2&gt;

&lt;p&gt;If you haven’t already, you’ll need to add a Google Analytics tag in order
to follow your traffic.&lt;/p&gt;

&lt;p&gt;To do that, let’s create an &lt;code class=&quot;highlighter-rouge&quot;&gt;analytics.html&lt;/code&gt; file in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt; folder.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Global site tag (gtag.js) - Google Analytics --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preconnect&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;as=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;script&quot;&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.googletagmanager.com/gtag/js?id=YOUR_TRACKING_ID&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataLayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataLayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gtag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;gtag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;gtag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'config'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;YOUR_TRACKING_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, you’ll need to include &lt;code class=&quot;highlighter-rouge&quot;&gt;analytics.html&lt;/code&gt; in your &lt;code class=&quot;highlighter-rouge&quot;&gt;custom-head.html&lt;/code&gt; file:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/e8a02a89d20d53ba4c5671f1c6121de8.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;% if %&lt;/code&gt; condition removes the tracking tag from my own local server. Thus,
my own local tests will not be taken into account in my global Analytics
reports.&lt;/p&gt;

&lt;h2 id=&quot;performance-optimizations&quot;&gt;Performance optimizations&lt;/h2&gt;

&lt;h3 id=&quot;google-analytics-tracking&quot;&gt;Google Analytics tracking&lt;/h3&gt;

&lt;p&gt;You may have noticed that, in the &lt;code class=&quot;highlighter-rouge&quot;&gt;analytics.html&lt;/code&gt; file, I did not use the
default script provided by Google.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--Default script--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;async&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.googletagmanager.com/gtag/js?id=YOUR_TRACKING_ID&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!--Custom script--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preconnect&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;as=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;script&quot;&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.googletagmanager.com/gtag/js?id=YOUR_TRACKING_ID&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead, I’m using the resource hint &lt;code class=&quot;highlighter-rouge&quot;&gt;rel=&quot;preconnect&quot;&lt;/code&gt; in order to tell the 
browser to start loading the Google Analytics script before an HTTP request 
is sent to the server. This performance optimization improved my loading time 
by &lt;strong&gt;130 ms&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;reduce-image-size&quot;&gt;Reduce image size&lt;/h3&gt;

&lt;p&gt;Before uploading an image, you should always:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Resize the image at its minimum. For instance, my blog accepts images up to 
800 px width, therefore it’s no use uploading a 1500 px photo.&lt;/li&gt;
  &lt;li&gt;Compress the image with a service like &lt;a href=&quot;https://tinypng.com/&quot;&gt;TinyPNG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This simple action will save you dozens of ms of loading time.&lt;/p&gt;

&lt;h3 id=&quot;replace-github-gist-by-code-snippets&quot;&gt;Replace Github gist by code snippets&lt;/h3&gt;

&lt;p&gt;Whenever possible, use Markdown code snippets instead of Github gist. As 
pretty as they are, they also take up some precious loading time (about
&lt;strong&gt;300 ms&lt;/strong&gt; for my blog).&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/sloth.jpg&quot;&gt;
            &lt;img src=&quot;/assets/images/sloth.jpg&quot; alt=&quot;Cute sloth&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;Accurate picture of a Github asset being loaded&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;remove-useless-fonts&quot;&gt;Remove useless fonts&lt;/h3&gt;

&lt;p&gt;My Jekyll theme came with a &lt;strong&gt;190 ms&lt;/strong&gt; loading time title font. Which could 
mean only one thing: the font had to go.&lt;/p&gt;

&lt;p&gt;Surprisingly, it was actually pretty difficult to get rid of it.&lt;/p&gt;

&lt;p&gt;As the font was present in the default &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/font-includes.html&lt;/code&gt; file,
I had to create a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/head.html&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Inside this new &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt;, I deleted the infamous
&lt;code class=&quot;highlighter-rouge&quot;&gt;% include font-includes.html %&lt;/code&gt; line, and the font loading time magically
disappeared. 🚀&lt;/p&gt;

&lt;h2 id=&quot;accessibility&quot;&gt;Accessibility&lt;/h2&gt;

&lt;p&gt;The theme I’ve used scored pretty poorly on Accessibility items, because the 
colors chosen (albeit beautiful) lacked contrasts. This was especially true
for the theme’s code snippets.&lt;/p&gt;

&lt;p&gt;Therefore, I’ve used this 
&lt;a href=&quot;https://dequeuniversity.com/rules/axe/3.3/color-contrast&quot;&gt;contrast tool&lt;/a&gt;
to select new colors. Then, I’ve included the new hexadecimal codes in 
my &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/css/main.scss&lt;/code&gt; file. Here’s an excerpt:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* Literal.Number */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#C04343&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* Literal.String */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.na&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#8B38D1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;seo-101&quot;&gt;SEO 101&lt;/h2&gt;

&lt;p&gt;Finally, and perhaps the most important thing, is to consistently respect
the SEO Best practices throughout your website.&lt;/p&gt;

&lt;p&gt;Here are a few of them:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use &lt;strong&gt;HTTPS&lt;/strong&gt; (plus it’s so easy to enforce HTTPS with Github Pages!)&lt;/li&gt;
  &lt;li&gt;Declare the &lt;strong&gt;HTML doctype&lt;/strong&gt; at the beginning of the page, along as the
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;lang&amp;gt;&lt;/code&gt; attribute&lt;/li&gt;
  &lt;li&gt;Have a valid &lt;strong&gt;robots.txt&lt;/strong&gt; file&lt;/li&gt;
  &lt;li&gt;Use &lt;strong&gt;consistent URLs&lt;/strong&gt; (either &lt;code class=&quot;highlighter-rouge&quot;&gt;/my_link&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;/my_link/&lt;/code&gt; but not a mix 
of both)&lt;/li&gt;
  &lt;li&gt;Use the &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt; attribute&lt;/strong&gt; on your images, both for ranking and accessibility
reasons&lt;/li&gt;
  &lt;li&gt;Choose a discernable name for your &lt;strong&gt;links&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Make all &lt;strong&gt;external links&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;_blank&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;nofollow noopener&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Create a &lt;strong&gt;netlinking&lt;/strong&gt; strategy, to improve your pagerank and enhance the 
Internet user’s journey&lt;/li&gt;
  &lt;li&gt;…and a bunch of other stuff&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your best bet is to frequently run
&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot;&gt;Lighthouse audits&lt;/a&gt;
on your pages and fix every problematic item.&lt;/p&gt;

&lt;p&gt;Here’s the Lighthouse audit for this page:&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/lighthouse-audit.png&quot;&gt;
            &lt;img src=&quot;/assets/images/lighthouse-audit.png&quot; alt=&quot;Lighthouse audit's results on this web page&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;All green! 💚&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: My performance score here is somewhat lowered because of the inclusion of
Github gists, that significantly increases the loading time. The First 
Meaningful Paint is therefore at 2.5 seconds.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/&quot;&gt;My blog’s homepage&lt;/a&gt; has a much better overall performance, with a 
First Meaningful Paint at 0.8 second. This is mostly explained by the lack
of external resources loaded on the front page (no Github gist, no images).&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;figure&gt;
        &lt;a href=&quot;/assets/images/lighthouse-homepage.png&quot;&gt;
            &lt;img src=&quot;/assets/images/lighthouse-homepage.png&quot; alt=&quot;Lighthouse audit's results for the homepage&quot; /&gt;  
        &lt;/a&gt;
        &lt;figcaption&gt;Static websites are incredibly fast 😍&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;</content><author><name>Juliette Sinibardy</name></author><category term="Jekyll" /><category term="SEO" /><category term="Google" /><category term="How-To" /><category term="Lighthouse" /><category term="Jekyll plugin" /><category term="HTML" /><category term="CSS" /><summary type="html">What? There’s no sitemap here? - Me when I discovered my new Jekyll blog Although Jekyll comes a little “naked” in terms of necessary SEO tools (especially in comparison to traditional CMS), it’s pretty easy to remedy this situation. Here are a couple of easy steps to follow, in order to improve your SEO ranking and your Lighthouse score.</summary></entry></feed>